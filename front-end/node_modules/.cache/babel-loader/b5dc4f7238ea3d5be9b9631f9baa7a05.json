{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport axios from \"axios\";\nimport { userActions } from \"../../redux/slice/userSlice\";\nimport usersActions from \"../../redux/thunkActions/userActions\";\nimport { useDispatch } from \"react-redux/es/exports\";\nimport logosActions from \"../../redux/thunkActions/logoActions\";\nimport playersActions from \"../../redux/thunkActions/playerActions\";\nimport BackApi from \"../../api/BackApi\";\nimport SocialApi from \"../../api/SocialApi\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst LoginHandler = props => {\n  _s();\n\n  const {\n    loginType\n  } = props;\n  const navigate = useNavigate();\n  const dispatch = useDispatch();\n  let loginUrl;\n  const CODE = new URL(window.location.href).searchParams.get(\"code\");\n  const STATE = new URL(window.location.href).searchParams.get(\"state\");\n\n  if (loginType === \"N\") {\n    loginUrl = SocialApi.naver.login(CODE, STATE);\n  } else if (loginType === \"K\") {\n    loginUrl = SocialApi.kakao.login(CODE);\n  } else if (loginType === \"G\") {\n    loginUrl = SocialApi.google.login(CODE);\n  } // 네이버로 토큰 발급 요청\n\n\n  const getToken = () => {\n    axios.post(loginUrl, {\n      headers: {\n        \"Content-Type\": \"application/x-www-form-urlencoded;charset=utf-8\"\n      }\n    }, {\n      responseType: \"json\"\n    }).then(res => res.data).then(data => {\n      // 액세스 토큰으로 로그인 요청\n      if (data.access_token) {\n        axios.post(BackApi.users.login, {\n          accessToken: data.access_token,\n          loginType\n        }, {\n          headers: {\n            \"Content-type\": \"application/json\",\n            Accept: \"application/json\"\n          }\n        }).then(res => {\n          dispatch(logosActions.getLogoAPI());\n\n          if (res.data.message === \"회원가입을 먼저 해주세요.\") {\n            // 회원가입을 위해 uid를 저장 후 이동\n            // loginType은 로컬 스토리지에 있음\n            dispatch(userActions.setUid(res.data.uid));\n            navigate(\"/\");\n          } else {\n            // jwt 토큰과 유저 이름을 저장 후 메인 페이지로 이동\n            // 메인 페이지 이동 시 선수 전체 데이터와 유저 데이터를 요청 및 저장\n            dispatch(playersActions.getPlayerAPI());\n            dispatch(userActions.setJwt(res.data.jwt));\n            dispatch(userActions.setLoginType(\"\"));\n            dispatch(usersActions.getUserAPI(res.data.jwt));\n            navigate(\"/main\");\n          }\n        });\n      } else {\n        navigate(\"/\");\n      }\n    });\n  }; // 취소시 로직\n\n\n  let error = new URL(window.location.href).searchParams.get(\"error_description\");\n  useEffect(() => {\n    if (loginType) {\n      getToken();\n    }\n\n    if (error === \"Canceled By User\") {\n      navigate(\"/\");\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n};\n\n_s(LoginHandler, \"C8M3Qnh2JtuXRaZXcPUyNRrk+zo=\", false, function () {\n  return [useNavigate, useDispatch];\n});\n\n_c = LoginHandler;\nexport default LoginHandler;\n\nvar _c;\n\n$RefreshReg$(_c, \"LoginHandler\");","map":{"version":3,"names":["useEffect","useNavigate","axios","userActions","usersActions","useDispatch","logosActions","playersActions","BackApi","SocialApi","LoginHandler","props","loginType","navigate","dispatch","loginUrl","CODE","URL","window","location","href","searchParams","get","STATE","naver","login","kakao","google","getToken","post","headers","responseType","then","res","data","access_token","users","accessToken","Accept","getLogoAPI","message","setUid","uid","getPlayerAPI","setJwt","jwt","setLoginType","getUserAPI","error"],"sources":["C:/Users/multicampus/Desktop/projects/theground/front-end/src/landing/components/LoginHandler.js"],"sourcesContent":["import { useEffect } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport axios from \"axios\";\r\nimport { userActions } from \"../../redux/slice/userSlice\";\r\nimport usersActions from \"../../redux/thunkActions/userActions\";\r\nimport { useDispatch } from \"react-redux/es/exports\";\r\nimport logosActions from \"../../redux/thunkActions/logoActions\";\r\nimport playersActions from \"../../redux/thunkActions/playerActions\";\r\nimport BackApi from \"../../api/BackApi\";\r\nimport SocialApi from \"../../api/SocialApi\";\r\n\r\nconst LoginHandler = (props) => {\r\n  const { loginType } = props;\r\n  const navigate = useNavigate();\r\n  const dispatch = useDispatch();\r\n\r\n  let loginUrl;\r\n  const CODE = new URL(window.location.href).searchParams.get(\"code\");\r\n  const STATE = new URL(window.location.href).searchParams.get(\"state\");\r\n\r\n  if (loginType === \"N\") {\r\n    loginUrl = SocialApi.naver.login(CODE, STATE);\r\n  } else if (loginType === \"K\") {\r\n    loginUrl = SocialApi.kakao.login(CODE);\r\n  } else if (loginType === \"G\") {\r\n    loginUrl = SocialApi.google.login(CODE);\r\n  }\r\n\r\n  // 네이버로 토큰 발급 요청\r\n  const getToken = () => {\r\n    axios\r\n      .post(\r\n        loginUrl,\r\n        {\r\n          headers: {\r\n            \"Content-Type\": \"application/x-www-form-urlencoded;charset=utf-8\",\r\n          },\r\n        },\r\n        {\r\n          responseType: \"json\",\r\n        }\r\n      )\r\n      .then((res) => res.data)\r\n      .then((data) => {\r\n        // 액세스 토큰으로 로그인 요청\r\n        if (data.access_token) {\r\n          axios\r\n            .post(\r\n              BackApi.users.login,\r\n              {\r\n                accessToken: data.access_token,\r\n                loginType,\r\n              },\r\n              {\r\n                headers: {\r\n                  \"Content-type\": \"application/json\",\r\n                  Accept: \"application/json\",\r\n                },\r\n              }\r\n            )\r\n            .then((res) => {\r\n              dispatch(logosActions.getLogoAPI());\r\n              if (res.data.message === \"회원가입을 먼저 해주세요.\") {\r\n                // 회원가입을 위해 uid를 저장 후 이동\r\n                // loginType은 로컬 스토리지에 있음\r\n                dispatch(userActions.setUid(res.data.uid));\r\n                navigate(\"/\");\r\n              } else {\r\n                // jwt 토큰과 유저 이름을 저장 후 메인 페이지로 이동\r\n                // 메인 페이지 이동 시 선수 전체 데이터와 유저 데이터를 요청 및 저장\r\n                dispatch(playersActions.getPlayerAPI());\r\n                dispatch(userActions.setJwt(res.data.jwt));\r\n                dispatch(userActions.setLoginType(\"\"));\r\n                dispatch(usersActions.getUserAPI(res.data.jwt));\r\n                navigate(\"/main\");\r\n              }\r\n            });\r\n        } else {\r\n          navigate(\"/\");\r\n        }\r\n      });\r\n  };\r\n\r\n  // 취소시 로직\r\n  let error = new URL(window.location.href).searchParams.get(\r\n    \"error_description\"\r\n  );\r\n\r\n  useEffect(() => {\r\n    if (loginType) {\r\n      getToken();\r\n    }\r\n    if (error === \"Canceled By User\") {\r\n      navigate(\"/\");\r\n    }\r\n  });\r\n\r\n  return <></>;\r\n};\r\n\r\nexport default LoginHandler;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}