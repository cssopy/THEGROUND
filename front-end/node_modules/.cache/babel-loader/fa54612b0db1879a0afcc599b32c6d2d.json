{"ast":null,"code":"function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    var ownKeys = Object.keys(source);\n\n    if (typeof Object.getOwnPropertySymbols === 'function') {\n      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n      }));\n    }\n\n    ownKeys.forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    });\n  }\n\n  return target;\n}\n\nimport { BEGIN_DRAG, DROP, END_DRAG, HOVER, INIT_COORDS } from '../actions/dragDrop/index.js';\nimport { areCoordsEqual } from '../utils/equality.js';\nconst initialState = {\n  initialSourceClientOffset: null,\n  initialClientOffset: null,\n  clientOffset: null\n};\nexport function reduce() {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  const {\n    payload\n  } = action;\n\n  switch (action.type) {\n    case INIT_COORDS:\n    case BEGIN_DRAG:\n      return {\n        initialSourceClientOffset: payload.sourceClientOffset,\n        initialClientOffset: payload.clientOffset,\n        clientOffset: payload.clientOffset\n      };\n\n    case HOVER:\n      if (areCoordsEqual(state.clientOffset, payload.clientOffset)) {\n        return state;\n      }\n\n      return _objectSpread({}, state, {\n        clientOffset: payload.clientOffset\n      });\n\n    case END_DRAG:\n    case DROP:\n      return initialState;\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SACCA,UADD,EAECC,IAFD,EAGCC,QAHD,EAICC,KAJD,EAKCC,WALD,QAMO,8BANP;AAQA,SAASC,cAAT,QAA+B,sBAA/B;AAQA,MAAMC,YAAY,GAAU;EAC3BC,yBAAyB,EAAE,IADA;EAE3BC,mBAAmB,EAAE,IAFM;EAG3BC,YAAY,EAAE;AAHa,CAA5B;AAMA,OAAO,SAASC,MAAT,GAME;EAAA,IALRC,KAKQ,uEALOL,YAKP;EAAA,IAJRM,MAIQ;EACR,MAAM;IAAEC;EAAF,IAAcD,MAApB;;EACA,QAAQA,MAAM,CAACE,IAAf;IACC,KAAKV,WAAL;IACA,KAAKJ,UAAL;MACC,OAAO;QACNO,yBAAyB,EAAEM,OAAO,CAACE,kBAD7B;QAENP,mBAAmB,EAAEK,OAAO,CAACJ,YAFvB;QAGNA,YAAY,EAAEI,OAAO,CAACJ;MAHhB,CAAP;;IAKD,KAAKN,KAAL;MACC,IAAIE,cAAc,CAACM,KAAK,CAACF,YAAP,EAAqBI,OAAO,CAACJ,YAA7B,CAAlB,EAA8D;QAC7D,OAAOE,KAAP;MACA;;MACD,OAAOK,kBACHL,KADG,EACE;QACRF,YAAY,EAAEI,OAAO,CAACJ;MADd,CADF,CAAP;;IAID,KAAKP,QAAL;IACA,KAAKD,IAAL;MACC,OAAOK,YAAP;;IACD;MACC,OAAOK,KAAP;EApBF;AAsBA","names":["BEGIN_DRAG","DROP","END_DRAG","HOVER","INIT_COORDS","areCoordsEqual","initialState","initialSourceClientOffset","initialClientOffset","clientOffset","reduce","state","action","payload","type","sourceClientOffset","_objectSpread"],"sources":["C:\\Users\\multicampus\\Desktop\\projects\\theground\\front-end\\node_modules\\dnd-core\\src\\reducers\\dragOffset.ts"],"sourcesContent":["import {\n\tBEGIN_DRAG,\n\tDROP,\n\tEND_DRAG,\n\tHOVER,\n\tINIT_COORDS,\n} from '../actions/dragDrop/index.js'\nimport type { Action, XYCoord } from '../interfaces.js'\nimport { areCoordsEqual } from '../utils/equality.js'\n\nexport interface State {\n\tinitialSourceClientOffset: XYCoord | null\n\tinitialClientOffset: XYCoord | null\n\tclientOffset: XYCoord | null\n}\n\nconst initialState: State = {\n\tinitialSourceClientOffset: null,\n\tinitialClientOffset: null,\n\tclientOffset: null,\n}\n\nexport function reduce(\n\tstate: State = initialState,\n\taction: Action<{\n\t\tsourceClientOffset: XYCoord\n\t\tclientOffset: XYCoord\n\t}>,\n): State {\n\tconst { payload } = action\n\tswitch (action.type) {\n\t\tcase INIT_COORDS:\n\t\tcase BEGIN_DRAG:\n\t\t\treturn {\n\t\t\t\tinitialSourceClientOffset: payload.sourceClientOffset,\n\t\t\t\tinitialClientOffset: payload.clientOffset,\n\t\t\t\tclientOffset: payload.clientOffset,\n\t\t\t}\n\t\tcase HOVER:\n\t\t\tif (areCoordsEqual(state.clientOffset, payload.clientOffset)) {\n\t\t\t\treturn state\n\t\t\t}\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tclientOffset: payload.clientOffset,\n\t\t\t}\n\t\tcase END_DRAG:\n\t\tcase DROP:\n\t\t\treturn initialState\n\t\tdefault:\n\t\t\treturn state\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}