{"ast":null,"code":"function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    var ownKeys = Object.keys(source);\n\n    if (typeof Object.getOwnPropertySymbols === 'function') {\n      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n      }));\n    }\n\n    ownKeys.forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    });\n  }\n\n  return target;\n}\n\nimport { EnterLeaveCounter } from './EnterLeaveCounter.js';\nimport { createNativeDragSource, matchNativeItemType } from './NativeDragSources/index.js';\nimport * as NativeTypes from './NativeTypes.js';\nimport { getDragPreviewOffset, getEventClientOffset, getNodeClientOffset } from './OffsetUtils.js';\nimport { OptionsReader } from './OptionsReader.js';\nexport class HTML5BackendImpl {\n  /**\n  * Generate profiling statistics for the HTML5Backend.\n  */\n  profile() {\n    var ref, ref1;\n    return {\n      sourcePreviewNodes: this.sourcePreviewNodes.size,\n      sourcePreviewNodeOptions: this.sourcePreviewNodeOptions.size,\n      sourceNodeOptions: this.sourceNodeOptions.size,\n      sourceNodes: this.sourceNodes.size,\n      dragStartSourceIds: ((ref = this.dragStartSourceIds) === null || ref === void 0 ? void 0 : ref.length) || 0,\n      dropTargetIds: this.dropTargetIds.length,\n      dragEnterTargetIds: this.dragEnterTargetIds.length,\n      dragOverTargetIds: ((ref1 = this.dragOverTargetIds) === null || ref1 === void 0 ? void 0 : ref1.length) || 0\n    };\n  } // public for test\n\n\n  get window() {\n    return this.options.window;\n  }\n\n  get document() {\n    return this.options.document;\n  }\n  /**\n  * Get the root element to use for event subscriptions\n  */\n\n\n  get rootElement() {\n    return this.options.rootElement;\n  }\n\n  setup() {\n    const root = this.rootElement;\n\n    if (root === undefined) {\n      return;\n    }\n\n    if (root.__isReactDndBackendSetUp) {\n      throw new Error('Cannot have two HTML5 backends at the same time.');\n    }\n\n    root.__isReactDndBackendSetUp = true;\n    this.addEventListeners(root);\n  }\n\n  teardown() {\n    const root = this.rootElement;\n\n    if (root === undefined) {\n      return;\n    }\n\n    root.__isReactDndBackendSetUp = false;\n    this.removeEventListeners(this.rootElement);\n    this.clearCurrentDragSourceNode();\n\n    if (this.asyncEndDragFrameId) {\n      var ref;\n      (ref = this.window) === null || ref === void 0 ? void 0 : ref.cancelAnimationFrame(this.asyncEndDragFrameId);\n    }\n  }\n\n  connectDragPreview(sourceId, node, options) {\n    this.sourcePreviewNodeOptions.set(sourceId, options);\n    this.sourcePreviewNodes.set(sourceId, node);\n    return () => {\n      this.sourcePreviewNodes.delete(sourceId);\n      this.sourcePreviewNodeOptions.delete(sourceId);\n    };\n  }\n\n  connectDragSource(sourceId, node, options) {\n    this.sourceNodes.set(sourceId, node);\n    this.sourceNodeOptions.set(sourceId, options);\n\n    const handleDragStart = e => this.handleDragStart(e, sourceId);\n\n    const handleSelectStart = e => this.handleSelectStart(e);\n\n    node.setAttribute('draggable', 'true');\n    node.addEventListener('dragstart', handleDragStart);\n    node.addEventListener('selectstart', handleSelectStart);\n    return () => {\n      this.sourceNodes.delete(sourceId);\n      this.sourceNodeOptions.delete(sourceId);\n      node.removeEventListener('dragstart', handleDragStart);\n      node.removeEventListener('selectstart', handleSelectStart);\n      node.setAttribute('draggable', 'false');\n    };\n  }\n\n  connectDropTarget(targetId, node) {\n    const handleDragEnter = e => this.handleDragEnter(e, targetId);\n\n    const handleDragOver = e => this.handleDragOver(e, targetId);\n\n    const handleDrop = e => this.handleDrop(e, targetId);\n\n    node.addEventListener('dragenter', handleDragEnter);\n    node.addEventListener('dragover', handleDragOver);\n    node.addEventListener('drop', handleDrop);\n    return () => {\n      node.removeEventListener('dragenter', handleDragEnter);\n      node.removeEventListener('dragover', handleDragOver);\n      node.removeEventListener('drop', handleDrop);\n    };\n  }\n\n  addEventListeners(target) {\n    // SSR Fix (https://github.com/react-dnd/react-dnd/pull/813\n    if (!target.addEventListener) {\n      return;\n    }\n\n    target.addEventListener('dragstart', this.handleTopDragStart);\n    target.addEventListener('dragstart', this.handleTopDragStartCapture, true);\n    target.addEventListener('dragend', this.handleTopDragEndCapture, true);\n    target.addEventListener('dragenter', this.handleTopDragEnter);\n    target.addEventListener('dragenter', this.handleTopDragEnterCapture, true);\n    target.addEventListener('dragleave', this.handleTopDragLeaveCapture, true);\n    target.addEventListener('dragover', this.handleTopDragOver);\n    target.addEventListener('dragover', this.handleTopDragOverCapture, true);\n    target.addEventListener('drop', this.handleTopDrop);\n    target.addEventListener('drop', this.handleTopDropCapture, true);\n  }\n\n  removeEventListeners(target) {\n    // SSR Fix (https://github.com/react-dnd/react-dnd/pull/813\n    if (!target.removeEventListener) {\n      return;\n    }\n\n    target.removeEventListener('dragstart', this.handleTopDragStart);\n    target.removeEventListener('dragstart', this.handleTopDragStartCapture, true);\n    target.removeEventListener('dragend', this.handleTopDragEndCapture, true);\n    target.removeEventListener('dragenter', this.handleTopDragEnter);\n    target.removeEventListener('dragenter', this.handleTopDragEnterCapture, true);\n    target.removeEventListener('dragleave', this.handleTopDragLeaveCapture, true);\n    target.removeEventListener('dragover', this.handleTopDragOver);\n    target.removeEventListener('dragover', this.handleTopDragOverCapture, true);\n    target.removeEventListener('drop', this.handleTopDrop);\n    target.removeEventListener('drop', this.handleTopDropCapture, true);\n  }\n\n  getCurrentSourceNodeOptions() {\n    const sourceId = this.monitor.getSourceId();\n    const sourceNodeOptions = this.sourceNodeOptions.get(sourceId);\n    return _objectSpread({\n      dropEffect: this.altKeyPressed ? 'copy' : 'move'\n    }, sourceNodeOptions || {});\n  }\n\n  getCurrentDropEffect() {\n    if (this.isDraggingNativeItem()) {\n      // It makes more sense to default to 'copy' for native resources\n      return 'copy';\n    }\n\n    return this.getCurrentSourceNodeOptions().dropEffect;\n  }\n\n  getCurrentSourcePreviewNodeOptions() {\n    const sourceId = this.monitor.getSourceId();\n    const sourcePreviewNodeOptions = this.sourcePreviewNodeOptions.get(sourceId);\n    return _objectSpread({\n      anchorX: 0.5,\n      anchorY: 0.5,\n      captureDraggingState: false\n    }, sourcePreviewNodeOptions || {});\n  }\n\n  isDraggingNativeItem() {\n    const itemType = this.monitor.getItemType();\n    return Object.keys(NativeTypes).some(key => NativeTypes[key] === itemType);\n  }\n\n  beginDragNativeItem(type, dataTransfer) {\n    this.clearCurrentDragSourceNode();\n    this.currentNativeSource = createNativeDragSource(type, dataTransfer);\n    this.currentNativeHandle = this.registry.addSource(type, this.currentNativeSource);\n    this.actions.beginDrag([this.currentNativeHandle]);\n  }\n\n  setCurrentDragSourceNode(node) {\n    this.clearCurrentDragSourceNode();\n    this.currentDragSourceNode = node; // A timeout of > 0 is necessary to resolve Firefox issue referenced\n    // See:\n    //   * https://github.com/react-dnd/react-dnd/pull/928\n    //   * https://github.com/react-dnd/react-dnd/issues/869\n\n    const MOUSE_MOVE_TIMEOUT = 1000; // Receiving a mouse event in the middle of a dragging operation\n    // means it has ended and the drag source node disappeared from DOM,\n    // so the browser didn't dispatch the dragend event.\n    //\n    // We need to wait before we start listening for mousemove events.\n    // This is needed because the drag preview needs to be drawn or else it fires an 'mousemove' event\n    // immediately in some browsers.\n    //\n    // See:\n    //   * https://github.com/react-dnd/react-dnd/pull/928\n    //   * https://github.com/react-dnd/react-dnd/issues/869\n    //\n\n    this.mouseMoveTimeoutTimer = setTimeout(() => {\n      var ref;\n      return (ref = this.rootElement) === null || ref === void 0 ? void 0 : ref.addEventListener('mousemove', this.endDragIfSourceWasRemovedFromDOM, true);\n    }, MOUSE_MOVE_TIMEOUT);\n  }\n\n  clearCurrentDragSourceNode() {\n    if (this.currentDragSourceNode) {\n      this.currentDragSourceNode = null;\n\n      if (this.rootElement) {\n        var ref;\n        (ref = this.window) === null || ref === void 0 ? void 0 : ref.clearTimeout(this.mouseMoveTimeoutTimer || undefined);\n        this.rootElement.removeEventListener('mousemove', this.endDragIfSourceWasRemovedFromDOM, true);\n      }\n\n      this.mouseMoveTimeoutTimer = null;\n      return true;\n    }\n\n    return false;\n  }\n\n  handleDragStart(e, sourceId) {\n    if (e.defaultPrevented) {\n      return;\n    }\n\n    if (!this.dragStartSourceIds) {\n      this.dragStartSourceIds = [];\n    }\n\n    this.dragStartSourceIds.unshift(sourceId);\n  }\n\n  handleDragEnter(_e, targetId) {\n    this.dragEnterTargetIds.unshift(targetId);\n  }\n\n  handleDragOver(_e, targetId) {\n    if (this.dragOverTargetIds === null) {\n      this.dragOverTargetIds = [];\n    }\n\n    this.dragOverTargetIds.unshift(targetId);\n  }\n\n  handleDrop(_e, targetId) {\n    this.dropTargetIds.unshift(targetId);\n  }\n\n  constructor(manager, globalContext, options) {\n    this.sourcePreviewNodes = new Map();\n    this.sourcePreviewNodeOptions = new Map();\n    this.sourceNodes = new Map();\n    this.sourceNodeOptions = new Map();\n    this.dragStartSourceIds = null;\n    this.dropTargetIds = [];\n    this.dragEnterTargetIds = [];\n    this.currentNativeSource = null;\n    this.currentNativeHandle = null;\n    this.currentDragSourceNode = null;\n    this.altKeyPressed = false;\n    this.mouseMoveTimeoutTimer = null;\n    this.asyncEndDragFrameId = null;\n    this.dragOverTargetIds = null;\n    this.lastClientOffset = null;\n    this.hoverRafId = null;\n\n    this.getSourceClientOffset = sourceId => {\n      const source = this.sourceNodes.get(sourceId);\n      return source && getNodeClientOffset(source) || null;\n    };\n\n    this.endDragNativeItem = () => {\n      if (!this.isDraggingNativeItem()) {\n        return;\n      }\n\n      this.actions.endDrag();\n\n      if (this.currentNativeHandle) {\n        this.registry.removeSource(this.currentNativeHandle);\n      }\n\n      this.currentNativeHandle = null;\n      this.currentNativeSource = null;\n    };\n\n    this.isNodeInDocument = node => {\n      // Check the node either in the main document or in the current context\n      return Boolean(node && this.document && this.document.body && this.document.body.contains(node));\n    };\n\n    this.endDragIfSourceWasRemovedFromDOM = () => {\n      const node = this.currentDragSourceNode;\n\n      if (node == null || this.isNodeInDocument(node)) {\n        return;\n      }\n\n      if (this.clearCurrentDragSourceNode() && this.monitor.isDragging()) {\n        this.actions.endDrag();\n      }\n\n      this.cancelHover();\n    };\n\n    this.scheduleHover = dragOverTargetIds => {\n      if (this.hoverRafId === null && typeof requestAnimationFrame !== 'undefined') {\n        this.hoverRafId = requestAnimationFrame(() => {\n          if (this.monitor.isDragging()) {\n            this.actions.hover(dragOverTargetIds || [], {\n              clientOffset: this.lastClientOffset\n            });\n          }\n\n          this.hoverRafId = null;\n        });\n      }\n    };\n\n    this.cancelHover = () => {\n      if (this.hoverRafId !== null && typeof cancelAnimationFrame !== 'undefined') {\n        cancelAnimationFrame(this.hoverRafId);\n        this.hoverRafId = null;\n      }\n    };\n\n    this.handleTopDragStartCapture = () => {\n      this.clearCurrentDragSourceNode();\n      this.dragStartSourceIds = [];\n    };\n\n    this.handleTopDragStart = e => {\n      if (e.defaultPrevented) {\n        return;\n      }\n\n      const {\n        dragStartSourceIds\n      } = this;\n      this.dragStartSourceIds = null;\n      const clientOffset = getEventClientOffset(e); // Avoid crashing if we missed a drop event or our previous drag died\n\n      if (this.monitor.isDragging()) {\n        this.actions.endDrag();\n        this.cancelHover();\n      } // Don't publish the source just yet (see why below)\n\n\n      this.actions.beginDrag(dragStartSourceIds || [], {\n        publishSource: false,\n        getSourceClientOffset: this.getSourceClientOffset,\n        clientOffset\n      });\n      const {\n        dataTransfer\n      } = e;\n      const nativeType = matchNativeItemType(dataTransfer);\n\n      if (this.monitor.isDragging()) {\n        if (dataTransfer && typeof dataTransfer.setDragImage === 'function') {\n          // Use custom drag image if user specifies it.\n          // If child drag source refuses drag but parent agrees,\n          // use parent's node as drag image. Neither works in IE though.\n          const sourceId = this.monitor.getSourceId();\n          const sourceNode = this.sourceNodes.get(sourceId);\n          const dragPreview = this.sourcePreviewNodes.get(sourceId) || sourceNode;\n\n          if (dragPreview) {\n            const {\n              anchorX,\n              anchorY,\n              offsetX,\n              offsetY\n            } = this.getCurrentSourcePreviewNodeOptions();\n            const anchorPoint = {\n              anchorX,\n              anchorY\n            };\n            const offsetPoint = {\n              offsetX,\n              offsetY\n            };\n            const dragPreviewOffset = getDragPreviewOffset(sourceNode, dragPreview, clientOffset, anchorPoint, offsetPoint);\n            dataTransfer.setDragImage(dragPreview, dragPreviewOffset.x, dragPreviewOffset.y);\n          }\n        }\n\n        try {\n          // Firefox won't drag without setting data\n          dataTransfer === null || dataTransfer === void 0 ? void 0 : dataTransfer.setData('application/json', {});\n        } catch (err) {// IE doesn't support MIME types in setData\n        } // Store drag source node so we can check whether\n        // it is removed from DOM and trigger endDrag manually.\n\n\n        this.setCurrentDragSourceNode(e.target); // Now we are ready to publish the drag source.. or are we not?\n\n        const {\n          captureDraggingState\n        } = this.getCurrentSourcePreviewNodeOptions();\n\n        if (!captureDraggingState) {\n          // Usually we want to publish it in the next tick so that browser\n          // is able to screenshot the current (not yet dragging) state.\n          //\n          // It also neatly avoids a situation where render() returns null\n          // in the same tick for the source element, and browser freaks out.\n          setTimeout(() => this.actions.publishDragSource(), 0);\n        } else {\n          // In some cases the user may want to override this behavior, e.g.\n          // to work around IE not supporting custom drag previews.\n          //\n          // When using a custom drag layer, the only way to prevent\n          // the default drag preview from drawing in IE is to screenshot\n          // the dragging state in which the node itself has zero opacity\n          // and height. In this case, though, returning null from render()\n          // will abruptly end the dragging, which is not obvious.\n          //\n          // This is the reason such behavior is strictly opt-in.\n          this.actions.publishDragSource();\n        }\n      } else if (nativeType) {\n        // A native item (such as URL) dragged from inside the document\n        this.beginDragNativeItem(nativeType);\n      } else if (dataTransfer && !dataTransfer.types && (e.target && !e.target.hasAttribute || !e.target.hasAttribute('draggable'))) {\n        // Looks like a Safari bug: dataTransfer.types is null, but there was no draggable.\n        // Just let it drag. It's a native type (URL or text) and will be picked up in\n        // dragenter handler.\n        return;\n      } else {\n        // If by this time no drag source reacted, tell browser not to drag.\n        e.preventDefault();\n      }\n    };\n\n    this.handleTopDragEndCapture = () => {\n      if (this.clearCurrentDragSourceNode() && this.monitor.isDragging()) {\n        // Firefox can dispatch this event in an infinite loop\n        // if dragend handler does something like showing an alert.\n        // Only proceed if we have not handled it already.\n        this.actions.endDrag();\n      }\n\n      this.cancelHover();\n    };\n\n    this.handleTopDragEnterCapture = e => {\n      this.dragEnterTargetIds = [];\n\n      if (this.isDraggingNativeItem()) {\n        var ref;\n        (ref = this.currentNativeSource) === null || ref === void 0 ? void 0 : ref.loadDataTransfer(e.dataTransfer);\n      }\n\n      const isFirstEnter = this.enterLeaveCounter.enter(e.target);\n\n      if (!isFirstEnter || this.monitor.isDragging()) {\n        return;\n      }\n\n      const {\n        dataTransfer\n      } = e;\n      const nativeType = matchNativeItemType(dataTransfer);\n\n      if (nativeType) {\n        // A native item (such as file or URL) dragged from outside the document\n        this.beginDragNativeItem(nativeType, dataTransfer);\n      }\n    };\n\n    this.handleTopDragEnter = e => {\n      const {\n        dragEnterTargetIds\n      } = this;\n      this.dragEnterTargetIds = [];\n\n      if (!this.monitor.isDragging()) {\n        // This is probably a native item type we don't understand.\n        return;\n      }\n\n      this.altKeyPressed = e.altKey; // If the target changes position as the result of `dragenter`, `dragover` might still\n      // get dispatched despite target being no longer there. The easy solution is to check\n      // whether there actually is a target before firing `hover`.\n\n      if (dragEnterTargetIds.length > 0) {\n        this.actions.hover(dragEnterTargetIds, {\n          clientOffset: getEventClientOffset(e)\n        });\n      }\n\n      const canDrop = dragEnterTargetIds.some(targetId => this.monitor.canDropOnTarget(targetId));\n\n      if (canDrop) {\n        // IE requires this to fire dragover events\n        e.preventDefault();\n\n        if (e.dataTransfer) {\n          e.dataTransfer.dropEffect = this.getCurrentDropEffect();\n        }\n      }\n    };\n\n    this.handleTopDragOverCapture = e => {\n      this.dragOverTargetIds = [];\n\n      if (this.isDraggingNativeItem()) {\n        var ref;\n        (ref = this.currentNativeSource) === null || ref === void 0 ? void 0 : ref.loadDataTransfer(e.dataTransfer);\n      }\n    };\n\n    this.handleTopDragOver = e => {\n      const {\n        dragOverTargetIds\n      } = this;\n      this.dragOverTargetIds = [];\n\n      if (!this.monitor.isDragging()) {\n        // This is probably a native item type we don't understand.\n        // Prevent default \"drop and blow away the whole document\" action.\n        e.preventDefault();\n\n        if (e.dataTransfer) {\n          e.dataTransfer.dropEffect = 'none';\n        }\n\n        return;\n      }\n\n      this.altKeyPressed = e.altKey;\n      this.lastClientOffset = getEventClientOffset(e);\n      this.scheduleHover(dragOverTargetIds);\n      const canDrop = (dragOverTargetIds || []).some(targetId => this.monitor.canDropOnTarget(targetId));\n\n      if (canDrop) {\n        // Show user-specified drop effect.\n        e.preventDefault();\n\n        if (e.dataTransfer) {\n          e.dataTransfer.dropEffect = this.getCurrentDropEffect();\n        }\n      } else if (this.isDraggingNativeItem()) {\n        // Don't show a nice cursor but still prevent default\n        // \"drop and blow away the whole document\" action.\n        e.preventDefault();\n      } else {\n        e.preventDefault();\n\n        if (e.dataTransfer) {\n          e.dataTransfer.dropEffect = 'none';\n        }\n      }\n    };\n\n    this.handleTopDragLeaveCapture = e => {\n      if (this.isDraggingNativeItem()) {\n        e.preventDefault();\n      }\n\n      const isLastLeave = this.enterLeaveCounter.leave(e.target);\n\n      if (!isLastLeave) {\n        return;\n      }\n\n      if (this.isDraggingNativeItem()) {\n        setTimeout(() => this.endDragNativeItem(), 0);\n      }\n\n      this.cancelHover();\n    };\n\n    this.handleTopDropCapture = e => {\n      this.dropTargetIds = [];\n\n      if (this.isDraggingNativeItem()) {\n        var ref;\n        e.preventDefault();\n        (ref = this.currentNativeSource) === null || ref === void 0 ? void 0 : ref.loadDataTransfer(e.dataTransfer);\n      } else if (matchNativeItemType(e.dataTransfer)) {\n        // Dragging some elements, like <a> and <img> may still behave like a native drag event,\n        // even if the current drag event matches a user-defined type.\n        // Stop the default behavior when we're not expecting a native item to be dropped.\n        e.preventDefault();\n      }\n\n      this.enterLeaveCounter.reset();\n    };\n\n    this.handleTopDrop = e => {\n      const {\n        dropTargetIds\n      } = this;\n      this.dropTargetIds = [];\n      this.actions.hover(dropTargetIds, {\n        clientOffset: getEventClientOffset(e)\n      });\n      this.actions.drop({\n        dropEffect: this.getCurrentDropEffect()\n      });\n\n      if (this.isDraggingNativeItem()) {\n        this.endDragNativeItem();\n      } else if (this.monitor.isDragging()) {\n        this.actions.endDrag();\n      }\n\n      this.cancelHover();\n    };\n\n    this.handleSelectStart = e => {\n      const target = e.target; // Only IE requires us to explicitly say\n      // we want drag drop operation to start\n\n      if (typeof target.dragDrop !== 'function') {\n        return;\n      } // Inputs and textareas should be selectable\n\n\n      if (target.tagName === 'INPUT' || target.tagName === 'SELECT' || target.tagName === 'TEXTAREA' || target.isContentEditable) {\n        return;\n      } // For other targets, ask IE\n      // to enable drag and drop\n\n\n      e.preventDefault();\n      target.dragDrop();\n    };\n\n    this.options = new OptionsReader(globalContext, options);\n    this.actions = manager.getActions();\n    this.monitor = manager.getMonitor();\n    this.registry = manager.getRegistry();\n    this.enterLeaveCounter = new EnterLeaveCounter(this.isNodeInDocument);\n  }\n\n}","map":{"version":3,"mappings":"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","names":["EnterLeaveCounter","createNativeDragSource","matchNativeItemType","NativeTypes","getDragPreviewOffset","getEventClientOffset","getNodeClientOffset","OptionsReader","HTML5BackendImpl","profile","ref","ref1","sourcePreviewNodes","size","sourcePreviewNodeOptions","sourceNodeOptions","sourceNodes","dragStartSourceIds","length","dropTargetIds","dragEnterTargetIds","dragOverTargetIds","window","options","document","rootElement","setup","root","undefined","__isReactDndBackendSetUp","Error","addEventListeners","teardown","removeEventListeners","clearCurrentDragSourceNode","asyncEndDragFrameId","cancelAnimationFrame","connectDragPreview","sourceId","node","set","delete","connectDragSource","handleDragStart","e","handleSelectStart","setAttribute","addEventListener","removeEventListener","connectDropTarget","targetId","handleDragEnter","handleDragOver","handleDrop","target","handleTopDragStart","handleTopDragStartCapture","handleTopDragEndCapture","handleTopDragEnter","handleTopDragEnterCapture","handleTopDragLeaveCapture","handleTopDragOver","handleTopDragOverCapture","handleTopDrop","handleTopDropCapture","getCurrentSourceNodeOptions","monitor","getSourceId","get","_objectSpread","dropEffect","altKeyPressed","getCurrentDropEffect","isDraggingNativeItem","getCurrentSourcePreviewNodeOptions","anchorX","anchorY","captureDraggingState","itemType","getItemType","Object","keys","some","key","beginDragNativeItem","type","dataTransfer","currentNativeSource","currentNativeHandle","registry","addSource","actions","beginDrag","setCurrentDragSourceNode","currentDragSourceNode","MOUSE_MOVE_TIMEOUT","mouseMoveTimeoutTimer","setTimeout","endDragIfSourceWasRemovedFromDOM","clearTimeout","defaultPrevented","unshift","_e","constructor","manager","globalContext","Map","lastClientOffset","hoverRafId","getSourceClientOffset","source","endDragNativeItem","endDrag","removeSource","isNodeInDocument","Boolean","body","contains","isDragging","cancelHover","scheduleHover","requestAnimationFrame","hover","clientOffset","publishSource","nativeType","setDragImage","sourceNode","dragPreview","offsetX","offsetY","anchorPoint","offsetPoint","dragPreviewOffset","x","y","setData","err","publishDragSource","types","hasAttribute","preventDefault","loadDataTransfer","isFirstEnter","enterLeaveCounter","enter","altKey","canDrop","canDropOnTarget","isLastLeave","leave","reset","drop","dragDrop","tagName","isContentEditable","getActions","getMonitor","getRegistry"],"sources":["C:\\Users\\multicampus\\Desktop\\projects\\theground\\front-end\\node_modules\\react-dnd-html5-backend\\src\\HTML5BackendImpl.ts"],"sourcesContent":["import type {\n\tBackend,\n\tDragDropActions,\n\tDragDropManager,\n\tDragDropMonitor,\n\tHandlerRegistry,\n\tIdentifier,\n\tUnsubscribe,\n\tXYCoord,\n} from 'dnd-core'\n\nimport { EnterLeaveCounter } from './EnterLeaveCounter.js'\nimport {\n\tcreateNativeDragSource,\n\tmatchNativeItemType,\n} from './NativeDragSources/index.js'\nimport type { NativeDragSource } from './NativeDragSources/NativeDragSource.js'\nimport * as NativeTypes from './NativeTypes.js'\nimport {\n\tgetDragPreviewOffset,\n\tgetEventClientOffset,\n\tgetNodeClientOffset,\n} from './OffsetUtils.js'\nimport { OptionsReader } from './OptionsReader.js'\nimport type { HTML5BackendContext, HTML5BackendOptions } from './types.js'\n\ntype RootNode = Node & { __isReactDndBackendSetUp: boolean | undefined }\n\nexport class HTML5BackendImpl implements Backend {\n\tprivate options: OptionsReader\n\n\t// React-Dnd Components\n\tprivate actions: DragDropActions\n\tprivate monitor: DragDropMonitor\n\tprivate registry: HandlerRegistry\n\n\t// Internal State\n\tprivate enterLeaveCounter: EnterLeaveCounter\n\n\tprivate sourcePreviewNodes: Map<string, Element> = new Map()\n\tprivate sourcePreviewNodeOptions: Map<string, any> = new Map()\n\tprivate sourceNodes: Map<string, Element> = new Map()\n\tprivate sourceNodeOptions: Map<string, any> = new Map()\n\n\tprivate dragStartSourceIds: string[] | null = null\n\tprivate dropTargetIds: string[] = []\n\tprivate dragEnterTargetIds: string[] = []\n\tprivate currentNativeSource: NativeDragSource | null = null\n\tprivate currentNativeHandle: Identifier | null = null\n\tprivate currentDragSourceNode: Element | null = null\n\tprivate altKeyPressed = false\n\tprivate mouseMoveTimeoutTimer: number | null = null\n\tprivate asyncEndDragFrameId: number | null = null\n\tprivate dragOverTargetIds: string[] | null = null\n\n\tprivate lastClientOffset: XYCoord | null = null\n\tprivate hoverRafId: number | null = null\n\n\tpublic constructor(\n\t\tmanager: DragDropManager,\n\t\tglobalContext?: HTML5BackendContext,\n\t\toptions?: HTML5BackendOptions,\n\t) {\n\t\tthis.options = new OptionsReader(globalContext, options)\n\t\tthis.actions = manager.getActions()\n\t\tthis.monitor = manager.getMonitor()\n\t\tthis.registry = manager.getRegistry()\n\t\tthis.enterLeaveCounter = new EnterLeaveCounter(this.isNodeInDocument)\n\t}\n\n\t/**\n\t * Generate profiling statistics for the HTML5Backend.\n\t */\n\tpublic profile(): Record<string, number> {\n\t\treturn {\n\t\t\tsourcePreviewNodes: this.sourcePreviewNodes.size,\n\t\t\tsourcePreviewNodeOptions: this.sourcePreviewNodeOptions.size,\n\t\t\tsourceNodeOptions: this.sourceNodeOptions.size,\n\t\t\tsourceNodes: this.sourceNodes.size,\n\t\t\tdragStartSourceIds: this.dragStartSourceIds?.length || 0,\n\t\t\tdropTargetIds: this.dropTargetIds.length,\n\t\t\tdragEnterTargetIds: this.dragEnterTargetIds.length,\n\t\t\tdragOverTargetIds: this.dragOverTargetIds?.length || 0,\n\t\t}\n\t}\n\n\t// public for test\n\tpublic get window(): Window | undefined {\n\t\treturn this.options.window\n\t}\n\tpublic get document(): Document | undefined {\n\t\treturn this.options.document\n\t}\n\t/**\n\t * Get the root element to use for event subscriptions\n\t */\n\tprivate get rootElement(): Node | undefined {\n\t\treturn this.options.rootElement as Node\n\t}\n\n\tpublic setup(): void {\n\t\tconst root = this.rootElement as RootNode | undefined\n\t\tif (root === undefined) {\n\t\t\treturn\n\t\t}\n\n\t\tif (root.__isReactDndBackendSetUp) {\n\t\t\tthrow new Error('Cannot have two HTML5 backends at the same time.')\n\t\t}\n\t\troot.__isReactDndBackendSetUp = true\n\t\tthis.addEventListeners(root)\n\t}\n\n\tpublic teardown(): void {\n\t\tconst root = this.rootElement as RootNode\n\t\tif (root === undefined) {\n\t\t\treturn\n\t\t}\n\n\t\troot.__isReactDndBackendSetUp = false\n\t\tthis.removeEventListeners(this.rootElement as Element)\n\t\tthis.clearCurrentDragSourceNode()\n\t\tif (this.asyncEndDragFrameId) {\n\t\t\tthis.window?.cancelAnimationFrame(this.asyncEndDragFrameId)\n\t\t}\n\t}\n\n\tpublic connectDragPreview(\n\t\tsourceId: string,\n\t\tnode: Element,\n\t\toptions: any,\n\t): Unsubscribe {\n\t\tthis.sourcePreviewNodeOptions.set(sourceId, options)\n\t\tthis.sourcePreviewNodes.set(sourceId, node)\n\n\t\treturn (): void => {\n\t\t\tthis.sourcePreviewNodes.delete(sourceId)\n\t\t\tthis.sourcePreviewNodeOptions.delete(sourceId)\n\t\t}\n\t}\n\n\tpublic connectDragSource(\n\t\tsourceId: string,\n\t\tnode: Element,\n\t\toptions: any,\n\t): Unsubscribe {\n\t\tthis.sourceNodes.set(sourceId, node)\n\t\tthis.sourceNodeOptions.set(sourceId, options)\n\n\t\tconst handleDragStart = (e: any) => this.handleDragStart(e, sourceId)\n\t\tconst handleSelectStart = (e: any) => this.handleSelectStart(e)\n\n\t\tnode.setAttribute('draggable', 'true')\n\t\tnode.addEventListener('dragstart', handleDragStart)\n\t\tnode.addEventListener('selectstart', handleSelectStart)\n\n\t\treturn (): void => {\n\t\t\tthis.sourceNodes.delete(sourceId)\n\t\t\tthis.sourceNodeOptions.delete(sourceId)\n\n\t\t\tnode.removeEventListener('dragstart', handleDragStart)\n\t\t\tnode.removeEventListener('selectstart', handleSelectStart)\n\t\t\tnode.setAttribute('draggable', 'false')\n\t\t}\n\t}\n\n\tpublic connectDropTarget(targetId: string, node: HTMLElement): Unsubscribe {\n\t\tconst handleDragEnter = (e: DragEvent) => this.handleDragEnter(e, targetId)\n\t\tconst handleDragOver = (e: DragEvent) => this.handleDragOver(e, targetId)\n\t\tconst handleDrop = (e: DragEvent) => this.handleDrop(e, targetId)\n\n\t\tnode.addEventListener('dragenter', handleDragEnter)\n\t\tnode.addEventListener('dragover', handleDragOver)\n\t\tnode.addEventListener('drop', handleDrop)\n\n\t\treturn (): void => {\n\t\t\tnode.removeEventListener('dragenter', handleDragEnter)\n\t\t\tnode.removeEventListener('dragover', handleDragOver)\n\t\t\tnode.removeEventListener('drop', handleDrop)\n\t\t}\n\t}\n\n\tprivate addEventListeners(target: Node) {\n\t\t// SSR Fix (https://github.com/react-dnd/react-dnd/pull/813\n\t\tif (!target.addEventListener) {\n\t\t\treturn\n\t\t}\n\t\ttarget.addEventListener(\n\t\t\t'dragstart',\n\t\t\tthis.handleTopDragStart as EventListener,\n\t\t)\n\t\ttarget.addEventListener('dragstart', this.handleTopDragStartCapture, true)\n\t\ttarget.addEventListener('dragend', this.handleTopDragEndCapture, true)\n\t\ttarget.addEventListener(\n\t\t\t'dragenter',\n\t\t\tthis.handleTopDragEnter as EventListener,\n\t\t)\n\t\ttarget.addEventListener(\n\t\t\t'dragenter',\n\t\t\tthis.handleTopDragEnterCapture as EventListener,\n\t\t\ttrue,\n\t\t)\n\t\ttarget.addEventListener(\n\t\t\t'dragleave',\n\t\t\tthis.handleTopDragLeaveCapture as EventListener,\n\t\t\ttrue,\n\t\t)\n\t\ttarget.addEventListener('dragover', this.handleTopDragOver as EventListener)\n\t\ttarget.addEventListener(\n\t\t\t'dragover',\n\t\t\tthis.handleTopDragOverCapture as EventListener,\n\t\t\ttrue,\n\t\t)\n\t\ttarget.addEventListener('drop', this.handleTopDrop as EventListener)\n\t\ttarget.addEventListener(\n\t\t\t'drop',\n\t\t\tthis.handleTopDropCapture as EventListener,\n\t\t\ttrue,\n\t\t)\n\t}\n\n\tprivate removeEventListeners(target: Node) {\n\t\t// SSR Fix (https://github.com/react-dnd/react-dnd/pull/813\n\t\tif (!target.removeEventListener) {\n\t\t\treturn\n\t\t}\n\t\ttarget.removeEventListener('dragstart', this.handleTopDragStart as any)\n\t\ttarget.removeEventListener(\n\t\t\t'dragstart',\n\t\t\tthis.handleTopDragStartCapture,\n\t\t\ttrue,\n\t\t)\n\t\ttarget.removeEventListener('dragend', this.handleTopDragEndCapture, true)\n\t\ttarget.removeEventListener(\n\t\t\t'dragenter',\n\t\t\tthis.handleTopDragEnter as EventListener,\n\t\t)\n\t\ttarget.removeEventListener(\n\t\t\t'dragenter',\n\t\t\tthis.handleTopDragEnterCapture as EventListener,\n\t\t\ttrue,\n\t\t)\n\t\ttarget.removeEventListener(\n\t\t\t'dragleave',\n\t\t\tthis.handleTopDragLeaveCapture as EventListener,\n\t\t\ttrue,\n\t\t)\n\t\ttarget.removeEventListener(\n\t\t\t'dragover',\n\t\t\tthis.handleTopDragOver as EventListener,\n\t\t)\n\t\ttarget.removeEventListener(\n\t\t\t'dragover',\n\t\t\tthis.handleTopDragOverCapture as EventListener,\n\t\t\ttrue,\n\t\t)\n\t\ttarget.removeEventListener('drop', this.handleTopDrop as EventListener)\n\t\ttarget.removeEventListener(\n\t\t\t'drop',\n\t\t\tthis.handleTopDropCapture as EventListener,\n\t\t\ttrue,\n\t\t)\n\t}\n\n\tprivate getCurrentSourceNodeOptions() {\n\t\tconst sourceId = this.monitor.getSourceId() as string\n\t\tconst sourceNodeOptions = this.sourceNodeOptions.get(sourceId)\n\n\t\treturn {\n\t\t\tdropEffect: this.altKeyPressed ? 'copy' : 'move',\n\t\t\t...(sourceNodeOptions || {}),\n\t\t}\n\t}\n\n\tprivate getCurrentDropEffect() {\n\t\tif (this.isDraggingNativeItem()) {\n\t\t\t// It makes more sense to default to 'copy' for native resources\n\t\t\treturn 'copy'\n\t\t}\n\n\t\treturn this.getCurrentSourceNodeOptions().dropEffect\n\t}\n\n\tprivate getCurrentSourcePreviewNodeOptions() {\n\t\tconst sourceId = this.monitor.getSourceId() as string\n\t\tconst sourcePreviewNodeOptions = this.sourcePreviewNodeOptions.get(sourceId)\n\n\t\treturn {\n\t\t\tanchorX: 0.5,\n\t\t\tanchorY: 0.5,\n\t\t\tcaptureDraggingState: false,\n\t\t\t...(sourcePreviewNodeOptions || {}),\n\t\t}\n\t}\n\n\tprivate getSourceClientOffset = (sourceId: string): XYCoord | null => {\n\t\tconst source = this.sourceNodes.get(sourceId)\n\t\treturn (source && getNodeClientOffset(source as HTMLElement)) || null\n\t}\n\n\tprivate isDraggingNativeItem() {\n\t\tconst itemType = this.monitor.getItemType()\n\t\treturn Object.keys(NativeTypes).some(\n\t\t\t(key: string) => (NativeTypes as any)[key] === itemType,\n\t\t)\n\t}\n\n\tprivate beginDragNativeItem(type: string, dataTransfer?: DataTransfer) {\n\t\tthis.clearCurrentDragSourceNode()\n\n\t\tthis.currentNativeSource = createNativeDragSource(type, dataTransfer)\n\t\tthis.currentNativeHandle = this.registry.addSource(\n\t\t\ttype,\n\t\t\tthis.currentNativeSource,\n\t\t)\n\t\tthis.actions.beginDrag([this.currentNativeHandle])\n\t}\n\n\tprivate endDragNativeItem = (): void => {\n\t\tif (!this.isDraggingNativeItem()) {\n\t\t\treturn\n\t\t}\n\n\t\tthis.actions.endDrag()\n\t\tif (this.currentNativeHandle) {\n\t\t\tthis.registry.removeSource(this.currentNativeHandle)\n\t\t}\n\t\tthis.currentNativeHandle = null\n\t\tthis.currentNativeSource = null\n\t}\n\n\tprivate isNodeInDocument = (node: Node | null | undefined): boolean => {\n\t\t// Check the node either in the main document or in the current context\n\t\treturn Boolean(\n\t\t\tnode &&\n\t\t\t\tthis.document &&\n\t\t\t\tthis.document.body &&\n\t\t\t\tthis.document.body.contains(node),\n\t\t)\n\t}\n\n\tprivate endDragIfSourceWasRemovedFromDOM = (): void => {\n\t\tconst node = this.currentDragSourceNode\n\t\tif (node == null || this.isNodeInDocument(node)) {\n\t\t\treturn\n\t\t}\n\n\t\tif (this.clearCurrentDragSourceNode() && this.monitor.isDragging()) {\n\t\t\tthis.actions.endDrag()\n\t\t}\n\t\tthis.cancelHover()\n\t}\n\n\tprivate setCurrentDragSourceNode(node: Element | null) {\n\t\tthis.clearCurrentDragSourceNode()\n\t\tthis.currentDragSourceNode = node\n\n\t\t// A timeout of > 0 is necessary to resolve Firefox issue referenced\n\t\t// See:\n\t\t//   * https://github.com/react-dnd/react-dnd/pull/928\n\t\t//   * https://github.com/react-dnd/react-dnd/issues/869\n\t\tconst MOUSE_MOVE_TIMEOUT = 1000\n\n\t\t// Receiving a mouse event in the middle of a dragging operation\n\t\t// means it has ended and the drag source node disappeared from DOM,\n\t\t// so the browser didn't dispatch the dragend event.\n\t\t//\n\t\t// We need to wait before we start listening for mousemove events.\n\t\t// This is needed because the drag preview needs to be drawn or else it fires an 'mousemove' event\n\t\t// immediately in some browsers.\n\t\t//\n\t\t// See:\n\t\t//   * https://github.com/react-dnd/react-dnd/pull/928\n\t\t//   * https://github.com/react-dnd/react-dnd/issues/869\n\t\t//\n\t\tthis.mouseMoveTimeoutTimer = setTimeout(() => {\n\t\t\treturn this.rootElement?.addEventListener(\n\t\t\t\t'mousemove',\n\t\t\t\tthis.endDragIfSourceWasRemovedFromDOM,\n\t\t\t\ttrue,\n\t\t\t)\n\t\t}, MOUSE_MOVE_TIMEOUT) as any as number\n\t}\n\n\tprivate clearCurrentDragSourceNode() {\n\t\tif (this.currentDragSourceNode) {\n\t\t\tthis.currentDragSourceNode = null\n\n\t\t\tif (this.rootElement) {\n\t\t\t\tthis.window?.clearTimeout(this.mouseMoveTimeoutTimer || undefined)\n\t\t\t\tthis.rootElement.removeEventListener(\n\t\t\t\t\t'mousemove',\n\t\t\t\t\tthis.endDragIfSourceWasRemovedFromDOM,\n\t\t\t\t\ttrue,\n\t\t\t\t)\n\t\t\t}\n\n\t\t\tthis.mouseMoveTimeoutTimer = null\n\t\t\treturn true\n\t\t}\n\n\t\treturn false\n\t}\n\n\tprivate scheduleHover = (dragOverTargetIds: string[] | null) => {\n\t\tif (\n\t\t\tthis.hoverRafId === null &&\n\t\t\ttypeof requestAnimationFrame !== 'undefined'\n\t\t) {\n\t\t\tthis.hoverRafId = requestAnimationFrame(() => {\n\t\t\t\tif (this.monitor.isDragging()) {\n\t\t\t\t\tthis.actions.hover(dragOverTargetIds || [], {\n\t\t\t\t\t\tclientOffset: this.lastClientOffset,\n\t\t\t\t\t})\n\t\t\t\t}\n\n\t\t\t\tthis.hoverRafId = null\n\t\t\t})\n\t\t}\n\t}\n\n\tprivate cancelHover = () => {\n\t\tif (\n\t\t\tthis.hoverRafId !== null &&\n\t\t\ttypeof cancelAnimationFrame !== 'undefined'\n\t\t) {\n\t\t\tcancelAnimationFrame(this.hoverRafId)\n\t\t\tthis.hoverRafId = null\n\t\t}\n\t}\n\n\tpublic handleTopDragStartCapture = (): void => {\n\t\tthis.clearCurrentDragSourceNode()\n\t\tthis.dragStartSourceIds = []\n\t}\n\n\tpublic handleDragStart(e: DragEvent, sourceId: string): void {\n\t\tif (e.defaultPrevented) {\n\t\t\treturn\n\t\t}\n\n\t\tif (!this.dragStartSourceIds) {\n\t\t\tthis.dragStartSourceIds = []\n\t\t}\n\t\tthis.dragStartSourceIds.unshift(sourceId)\n\t}\n\n\tpublic handleTopDragStart = (e: DragEvent): void => {\n\t\tif (e.defaultPrevented) {\n\t\t\treturn\n\t\t}\n\n\t\tconst { dragStartSourceIds } = this\n\t\tthis.dragStartSourceIds = null\n\n\t\tconst clientOffset = getEventClientOffset(e)\n\n\t\t// Avoid crashing if we missed a drop event or our previous drag died\n\t\tif (this.monitor.isDragging()) {\n\t\t\tthis.actions.endDrag()\n\t\t\tthis.cancelHover()\n\t\t}\n\n\t\t// Don't publish the source just yet (see why below)\n\t\tthis.actions.beginDrag(dragStartSourceIds || [], {\n\t\t\tpublishSource: false,\n\t\t\tgetSourceClientOffset: this.getSourceClientOffset,\n\t\t\tclientOffset,\n\t\t})\n\n\t\tconst { dataTransfer } = e\n\t\tconst nativeType = matchNativeItemType(dataTransfer)\n\n\t\tif (this.monitor.isDragging()) {\n\t\t\tif (dataTransfer && typeof dataTransfer.setDragImage === 'function') {\n\t\t\t\t// Use custom drag image if user specifies it.\n\t\t\t\t// If child drag source refuses drag but parent agrees,\n\t\t\t\t// use parent's node as drag image. Neither works in IE though.\n\t\t\t\tconst sourceId: string = this.monitor.getSourceId() as string\n\t\t\t\tconst sourceNode = this.sourceNodes.get(sourceId)\n\t\t\t\tconst dragPreview = this.sourcePreviewNodes.get(sourceId) || sourceNode\n\n\t\t\t\tif (dragPreview) {\n\t\t\t\t\tconst { anchorX, anchorY, offsetX, offsetY } =\n\t\t\t\t\t\tthis.getCurrentSourcePreviewNodeOptions()\n\t\t\t\t\tconst anchorPoint = { anchorX, anchorY }\n\t\t\t\t\tconst offsetPoint = { offsetX, offsetY }\n\t\t\t\t\tconst dragPreviewOffset = getDragPreviewOffset(\n\t\t\t\t\t\tsourceNode as HTMLElement,\n\t\t\t\t\t\tdragPreview as HTMLElement,\n\t\t\t\t\t\tclientOffset,\n\t\t\t\t\t\tanchorPoint,\n\t\t\t\t\t\toffsetPoint,\n\t\t\t\t\t)\n\n\t\t\t\t\tdataTransfer.setDragImage(\n\t\t\t\t\t\tdragPreview,\n\t\t\t\t\t\tdragPreviewOffset.x,\n\t\t\t\t\t\tdragPreviewOffset.y,\n\t\t\t\t\t)\n\t\t\t\t}\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\t// Firefox won't drag without setting data\n\t\t\t\tdataTransfer?.setData('application/json', {} as any)\n\t\t\t} catch (err) {\n\t\t\t\t// IE doesn't support MIME types in setData\n\t\t\t}\n\n\t\t\t// Store drag source node so we can check whether\n\t\t\t// it is removed from DOM and trigger endDrag manually.\n\t\t\tthis.setCurrentDragSourceNode(e.target as Element)\n\n\t\t\t// Now we are ready to publish the drag source.. or are we not?\n\t\t\tconst { captureDraggingState } = this.getCurrentSourcePreviewNodeOptions()\n\t\t\tif (!captureDraggingState) {\n\t\t\t\t// Usually we want to publish it in the next tick so that browser\n\t\t\t\t// is able to screenshot the current (not yet dragging) state.\n\t\t\t\t//\n\t\t\t\t// It also neatly avoids a situation where render() returns null\n\t\t\t\t// in the same tick for the source element, and browser freaks out.\n\t\t\t\tsetTimeout(() => this.actions.publishDragSource(), 0)\n\t\t\t} else {\n\t\t\t\t// In some cases the user may want to override this behavior, e.g.\n\t\t\t\t// to work around IE not supporting custom drag previews.\n\t\t\t\t//\n\t\t\t\t// When using a custom drag layer, the only way to prevent\n\t\t\t\t// the default drag preview from drawing in IE is to screenshot\n\t\t\t\t// the dragging state in which the node itself has zero opacity\n\t\t\t\t// and height. In this case, though, returning null from render()\n\t\t\t\t// will abruptly end the dragging, which is not obvious.\n\t\t\t\t//\n\t\t\t\t// This is the reason such behavior is strictly opt-in.\n\t\t\t\tthis.actions.publishDragSource()\n\t\t\t}\n\t\t} else if (nativeType) {\n\t\t\t// A native item (such as URL) dragged from inside the document\n\t\t\tthis.beginDragNativeItem(nativeType)\n\t\t} else if (\n\t\t\tdataTransfer &&\n\t\t\t!dataTransfer.types &&\n\t\t\t((e.target && !(e.target as Element).hasAttribute) ||\n\t\t\t\t!(e.target as Element).hasAttribute('draggable'))\n\t\t) {\n\t\t\t// Looks like a Safari bug: dataTransfer.types is null, but there was no draggable.\n\t\t\t// Just let it drag. It's a native type (URL or text) and will be picked up in\n\t\t\t// dragenter handler.\n\t\t\treturn\n\t\t} else {\n\t\t\t// If by this time no drag source reacted, tell browser not to drag.\n\t\t\te.preventDefault()\n\t\t}\n\t}\n\n\tpublic handleTopDragEndCapture = (): void => {\n\t\tif (this.clearCurrentDragSourceNode() && this.monitor.isDragging()) {\n\t\t\t// Firefox can dispatch this event in an infinite loop\n\t\t\t// if dragend handler does something like showing an alert.\n\t\t\t// Only proceed if we have not handled it already.\n\t\t\tthis.actions.endDrag()\n\t\t}\n\t\tthis.cancelHover()\n\t}\n\n\tpublic handleTopDragEnterCapture = (e: DragEvent): void => {\n\t\tthis.dragEnterTargetIds = []\n\n\t\tif (this.isDraggingNativeItem()) {\n\t\t\tthis.currentNativeSource?.loadDataTransfer(e.dataTransfer)\n\t\t}\n\n\t\tconst isFirstEnter = this.enterLeaveCounter.enter(e.target)\n\t\tif (!isFirstEnter || this.monitor.isDragging()) {\n\t\t\treturn\n\t\t}\n\n\t\tconst { dataTransfer } = e\n\t\tconst nativeType = matchNativeItemType(dataTransfer)\n\n\t\tif (nativeType) {\n\t\t\t// A native item (such as file or URL) dragged from outside the document\n\t\t\tthis.beginDragNativeItem(nativeType, dataTransfer as DataTransfer)\n\t\t}\n\t}\n\n\tpublic handleDragEnter(_e: DragEvent, targetId: string): void {\n\t\tthis.dragEnterTargetIds.unshift(targetId)\n\t}\n\n\tpublic handleTopDragEnter = (e: DragEvent): void => {\n\t\tconst { dragEnterTargetIds } = this\n\t\tthis.dragEnterTargetIds = []\n\n\t\tif (!this.monitor.isDragging()) {\n\t\t\t// This is probably a native item type we don't understand.\n\t\t\treturn\n\t\t}\n\n\t\tthis.altKeyPressed = e.altKey\n\n\t\t// If the target changes position as the result of `dragenter`, `dragover` might still\n\t\t// get dispatched despite target being no longer there. The easy solution is to check\n\t\t// whether there actually is a target before firing `hover`.\n\t\tif (dragEnterTargetIds.length > 0) {\n\t\t\tthis.actions.hover(dragEnterTargetIds, {\n\t\t\t\tclientOffset: getEventClientOffset(e),\n\t\t\t})\n\t\t}\n\n\t\tconst canDrop = dragEnterTargetIds.some((targetId) =>\n\t\t\tthis.monitor.canDropOnTarget(targetId),\n\t\t)\n\n\t\tif (canDrop) {\n\t\t\t// IE requires this to fire dragover events\n\t\t\te.preventDefault()\n\t\t\tif (e.dataTransfer) {\n\t\t\t\te.dataTransfer.dropEffect = this.getCurrentDropEffect()\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic handleTopDragOverCapture = (e: DragEvent): void => {\n\t\tthis.dragOverTargetIds = []\n\n\t\tif (this.isDraggingNativeItem()) {\n\t\t\tthis.currentNativeSource?.loadDataTransfer(e.dataTransfer)\n\t\t}\n\t}\n\n\tpublic handleDragOver(_e: DragEvent, targetId: string): void {\n\t\tif (this.dragOverTargetIds === null) {\n\t\t\tthis.dragOverTargetIds = []\n\t\t}\n\t\tthis.dragOverTargetIds.unshift(targetId)\n\t}\n\n\tpublic handleTopDragOver = (e: DragEvent): void => {\n\t\tconst { dragOverTargetIds } = this\n\t\tthis.dragOverTargetIds = []\n\n\t\tif (!this.monitor.isDragging()) {\n\t\t\t// This is probably a native item type we don't understand.\n\t\t\t// Prevent default \"drop and blow away the whole document\" action.\n\t\t\te.preventDefault()\n\t\t\tif (e.dataTransfer) {\n\t\t\t\te.dataTransfer.dropEffect = 'none'\n\t\t\t}\n\t\t\treturn\n\t\t}\n\n\t\tthis.altKeyPressed = e.altKey\n\t\tthis.lastClientOffset = getEventClientOffset(e)\n\n\t\tthis.scheduleHover(dragOverTargetIds)\n\n\t\tconst canDrop = (dragOverTargetIds || []).some((targetId) =>\n\t\t\tthis.monitor.canDropOnTarget(targetId),\n\t\t)\n\n\t\tif (canDrop) {\n\t\t\t// Show user-specified drop effect.\n\t\t\te.preventDefault()\n\t\t\tif (e.dataTransfer) {\n\t\t\t\te.dataTransfer.dropEffect = this.getCurrentDropEffect()\n\t\t\t}\n\t\t} else if (this.isDraggingNativeItem()) {\n\t\t\t// Don't show a nice cursor but still prevent default\n\t\t\t// \"drop and blow away the whole document\" action.\n\t\t\te.preventDefault()\n\t\t} else {\n\t\t\te.preventDefault()\n\t\t\tif (e.dataTransfer) {\n\t\t\t\te.dataTransfer.dropEffect = 'none'\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic handleTopDragLeaveCapture = (e: DragEvent): void => {\n\t\tif (this.isDraggingNativeItem()) {\n\t\t\te.preventDefault()\n\t\t}\n\n\t\tconst isLastLeave = this.enterLeaveCounter.leave(e.target)\n\t\tif (!isLastLeave) {\n\t\t\treturn\n\t\t}\n\n\t\tif (this.isDraggingNativeItem()) {\n\t\t\tsetTimeout(() => this.endDragNativeItem(), 0)\n\t\t}\n\t\tthis.cancelHover()\n\t}\n\n\tpublic handleTopDropCapture = (e: DragEvent): void => {\n\t\tthis.dropTargetIds = []\n\n\t\tif (this.isDraggingNativeItem()) {\n\t\t\te.preventDefault()\n\t\t\tthis.currentNativeSource?.loadDataTransfer(e.dataTransfer)\n\t\t} else if (matchNativeItemType(e.dataTransfer)) {\n\t\t\t// Dragging some elements, like <a> and <img> may still behave like a native drag event,\n\t\t\t// even if the current drag event matches a user-defined type.\n\t\t\t// Stop the default behavior when we're not expecting a native item to be dropped.\n\n\t\t\te.preventDefault()\n\t\t}\n\n\t\tthis.enterLeaveCounter.reset()\n\t}\n\n\tpublic handleDrop(_e: DragEvent, targetId: string): void {\n\t\tthis.dropTargetIds.unshift(targetId)\n\t}\n\n\tpublic handleTopDrop = (e: DragEvent): void => {\n\t\tconst { dropTargetIds } = this\n\t\tthis.dropTargetIds = []\n\n\t\tthis.actions.hover(dropTargetIds, {\n\t\t\tclientOffset: getEventClientOffset(e),\n\t\t})\n\t\tthis.actions.drop({ dropEffect: this.getCurrentDropEffect() })\n\n\t\tif (this.isDraggingNativeItem()) {\n\t\t\tthis.endDragNativeItem()\n\t\t} else if (this.monitor.isDragging()) {\n\t\t\tthis.actions.endDrag()\n\t\t}\n\t\tthis.cancelHover()\n\t}\n\n\tpublic handleSelectStart = (e: DragEvent): void => {\n\t\tconst target = e.target as HTMLElement & { dragDrop: () => void }\n\n\t\t// Only IE requires us to explicitly say\n\t\t// we want drag drop operation to start\n\t\tif (typeof target.dragDrop !== 'function') {\n\t\t\treturn\n\t\t}\n\n\t\t// Inputs and textareas should be selectable\n\t\tif (\n\t\t\ttarget.tagName === 'INPUT' ||\n\t\t\ttarget.tagName === 'SELECT' ||\n\t\t\ttarget.tagName === 'TEXTAREA' ||\n\t\t\ttarget.isContentEditable\n\t\t) {\n\t\t\treturn\n\t\t}\n\n\t\t// For other targets, ask IE\n\t\t// to enable drag and drop\n\t\te.preventDefault()\n\t\ttarget.dragDrop()\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}