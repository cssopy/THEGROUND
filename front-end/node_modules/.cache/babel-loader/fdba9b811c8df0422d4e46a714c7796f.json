{"ast":null,"code":"import { invariant } from '@react-dnd/invariant';\nimport { useMemo } from 'react';\n/**\n * Internal utility hook to get an array-version of spec.accept.\n * The main utility here is that we aren't creating a new array on every render if a non-array spec.accept is passed in.\n * @param spec\n */\n\nexport function useAccept(spec) {\n  const {\n    accept\n  } = spec;\n  return useMemo(() => {\n    invariant(spec.accept != null, 'accept must be defined');\n    return Array.isArray(accept) ? accept : [accept];\n  }, [accept]);\n}","map":{"version":3,"mappings":"AAAA,SAASA,SAAT,QAA0B,sBAA1B;AAEA,SAASC,OAAT,QAAwB,OAAxB;AAIA;;;;;;AAKA,OAAO,SAASC,SAAT,CACNC,IADM,EAES;EACf,MAAM;IAAEC;EAAF,IAAaD,IAAnB;EACA,OAAOF,OAAO,CAAC,MAAM;IACpBD,SAAS,CAACG,IAAI,CAACC,MAALD,IAAe,IAAhB,EAAsB,wBAAtB,CAATH;IACA,OAAOK,KAAK,CAACC,OAAND,CAAcD,MAAdC,IAAwBD,MAAxBC,GAAiC,CAACD,MAAD,CAAxC;EACA,CAHa,EAGX,CAACA,MAAD,CAHW,CAAd;AAIA","names":["invariant","useMemo","useAccept","spec","accept","Array","isArray"],"sources":["C:\\Users\\multicampus\\Desktop\\projects\\theground\\front-end\\node_modules\\react-dnd\\src\\hooks\\useDrop\\useAccept.ts"],"sourcesContent":["import { invariant } from '@react-dnd/invariant'\nimport type { Identifier } from 'dnd-core'\nimport { useMemo } from 'react'\n\nimport type { DropTargetHookSpec } from '../types.js'\n\n/**\n * Internal utility hook to get an array-version of spec.accept.\n * The main utility here is that we aren't creating a new array on every render if a non-array spec.accept is passed in.\n * @param spec\n */\nexport function useAccept<O, R, P>(\n\tspec: DropTargetHookSpec<O, R, P>,\n): Identifier[] {\n\tconst { accept } = spec\n\treturn useMemo(() => {\n\t\tinvariant(spec.accept != null, 'accept must be defined')\n\t\treturn Array.isArray(accept) ? accept : [accept]\n\t}, [accept])\n}\n"]},"metadata":{},"sourceType":"module"}