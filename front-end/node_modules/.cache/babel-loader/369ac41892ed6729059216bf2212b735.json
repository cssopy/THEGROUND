{"ast":null,"code":"import { invariant } from '@react-dnd/invariant';\nimport { isObject } from '../../utils/js_utils.js';\nimport { setClientOffset } from './local/setClientOffset.js';\nimport { BEGIN_DRAG, INIT_COORDS } from './types.js';\nconst ResetCoordinatesAction = {\n  type: INIT_COORDS,\n  payload: {\n    clientOffset: null,\n    sourceClientOffset: null\n  }\n};\nexport function createBeginDrag(manager) {\n  return function beginDrag() {\n    let sourceIds = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n      publishSource: true\n    };\n    const {\n      publishSource = true,\n      clientOffset,\n      getSourceClientOffset\n    } = options;\n    const monitor = manager.getMonitor();\n    const registry = manager.getRegistry(); // Initialize the coordinates using the client offset\n\n    manager.dispatch(setClientOffset(clientOffset));\n    verifyInvariants(sourceIds, monitor, registry); // Get the draggable source\n\n    const sourceId = getDraggableSource(sourceIds, monitor);\n\n    if (sourceId == null) {\n      manager.dispatch(ResetCoordinatesAction);\n      return;\n    } // Get the source client offset\n\n\n    let sourceClientOffset = null;\n\n    if (clientOffset) {\n      if (!getSourceClientOffset) {\n        throw new Error('getSourceClientOffset must be defined');\n      }\n\n      verifyGetSourceClientOffsetIsFunction(getSourceClientOffset);\n      sourceClientOffset = getSourceClientOffset(sourceId);\n    } // Initialize the full coordinates\n\n\n    manager.dispatch(setClientOffset(clientOffset, sourceClientOffset));\n    const source = registry.getSource(sourceId);\n    const item = source.beginDrag(monitor, sourceId); // If source.beginDrag returns null, this is an indicator to cancel the drag\n\n    if (item == null) {\n      return undefined;\n    }\n\n    verifyItemIsObject(item);\n    registry.pinSource(sourceId);\n    const itemType = registry.getSourceType(sourceId);\n    return {\n      type: BEGIN_DRAG,\n      payload: {\n        itemType,\n        item,\n        sourceId,\n        clientOffset: clientOffset || null,\n        sourceClientOffset: sourceClientOffset || null,\n        isSourcePublic: !!publishSource\n      }\n    };\n  };\n}\n\nfunction verifyInvariants(sourceIds, monitor, registry) {\n  invariant(!monitor.isDragging(), 'Cannot call beginDrag while dragging.');\n  sourceIds.forEach(function (sourceId) {\n    invariant(registry.getSource(sourceId), 'Expected sourceIds to be registered.');\n  });\n}\n\nfunction verifyGetSourceClientOffsetIsFunction(getSourceClientOffset) {\n  invariant(typeof getSourceClientOffset === 'function', 'When clientOffset is provided, getSourceClientOffset must be a function.');\n}\n\nfunction verifyItemIsObject(item) {\n  invariant(isObject(item), 'Item must be an object.');\n}\n\nfunction getDraggableSource(sourceIds, monitor) {\n  let sourceId = null;\n\n  for (let i = sourceIds.length - 1; i >= 0; i--) {\n    if (monitor.canDragSource(sourceIds[i])) {\n      sourceId = sourceIds[i];\n      break;\n    }\n  }\n\n  return sourceId;\n}","map":{"version":3,"mappings":"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","names":["invariant","isObject","setClientOffset","BEGIN_DRAG","INIT_COORDS","ResetCoordinatesAction","type","payload","clientOffset","sourceClientOffset","createBeginDrag","manager","beginDrag","sourceIds","options","publishSource","getSourceClientOffset","monitor","getMonitor","registry","getRegistry","dispatch","verifyInvariants","sourceId","getDraggableSource","Error","verifyGetSourceClientOffsetIsFunction","source","getSource","item","undefined","verifyItemIsObject","pinSource","itemType","getSourceType","isSourcePublic","isDragging","forEach","i","length","canDragSource"],"sources":["C:\\Users\\multicampus\\Desktop\\projects\\theground\\front-end\\node_modules\\dnd-core\\src\\actions\\dragDrop\\beginDrag.ts"],"sourcesContent":["import { invariant } from '@react-dnd/invariant'\n\nimport type {\n\tAction,\n\tBeginDragOptions,\n\tBeginDragPayload,\n\tDragDropManager,\n\tDragDropMonitor,\n\tHandlerRegistry,\n\tIdentifier,\n\tXYCoord,\n} from '../../interfaces.js'\nimport { isObject } from '../../utils/js_utils.js'\nimport { setClientOffset } from './local/setClientOffset.js'\nimport { BEGIN_DRAG, INIT_COORDS } from './types.js'\n\nconst ResetCoordinatesAction = {\n\ttype: INIT_COORDS,\n\tpayload: {\n\t\tclientOffset: null,\n\t\tsourceClientOffset: null,\n\t},\n}\n\nexport function createBeginDrag(manager: DragDropManager) {\n\treturn function beginDrag(\n\t\tsourceIds: Identifier[] = [],\n\t\toptions: BeginDragOptions = {\n\t\t\tpublishSource: true,\n\t\t},\n\t): Action<BeginDragPayload> | undefined {\n\t\tconst {\n\t\t\tpublishSource = true,\n\t\t\tclientOffset,\n\t\t\tgetSourceClientOffset,\n\t\t}: BeginDragOptions = options\n\t\tconst monitor = manager.getMonitor()\n\t\tconst registry = manager.getRegistry()\n\n\t\t// Initialize the coordinates using the client offset\n\t\tmanager.dispatch(setClientOffset(clientOffset))\n\n\t\tverifyInvariants(sourceIds, monitor, registry)\n\n\t\t// Get the draggable source\n\t\tconst sourceId = getDraggableSource(sourceIds, monitor)\n\t\tif (sourceId == null) {\n\t\t\tmanager.dispatch(ResetCoordinatesAction)\n\t\t\treturn\n\t\t}\n\n\t\t// Get the source client offset\n\t\tlet sourceClientOffset: XYCoord | null = null\n\t\tif (clientOffset) {\n\t\t\tif (!getSourceClientOffset) {\n\t\t\t\tthrow new Error('getSourceClientOffset must be defined')\n\t\t\t}\n\t\t\tverifyGetSourceClientOffsetIsFunction(getSourceClientOffset)\n\t\t\tsourceClientOffset = getSourceClientOffset(sourceId)\n\t\t}\n\n\t\t// Initialize the full coordinates\n\t\tmanager.dispatch(setClientOffset(clientOffset, sourceClientOffset))\n\n\t\tconst source = registry.getSource(sourceId)\n\t\tconst item = source.beginDrag(monitor, sourceId)\n\t\t// If source.beginDrag returns null, this is an indicator to cancel the drag\n\t\tif (item == null) {\n\t\t\treturn undefined\n\t\t}\n\t\tverifyItemIsObject(item)\n\t\tregistry.pinSource(sourceId)\n\n\t\tconst itemType = registry.getSourceType(sourceId)\n\t\treturn {\n\t\t\ttype: BEGIN_DRAG,\n\t\t\tpayload: {\n\t\t\t\titemType,\n\t\t\t\titem,\n\t\t\t\tsourceId,\n\t\t\t\tclientOffset: clientOffset || null,\n\t\t\t\tsourceClientOffset: sourceClientOffset || null,\n\t\t\t\tisSourcePublic: !!publishSource,\n\t\t\t},\n\t\t}\n\t}\n}\n\nfunction verifyInvariants(\n\tsourceIds: Identifier[],\n\tmonitor: DragDropMonitor,\n\tregistry: HandlerRegistry,\n) {\n\tinvariant(!monitor.isDragging(), 'Cannot call beginDrag while dragging.')\n\tsourceIds.forEach(function (sourceId) {\n\t\tinvariant(\n\t\t\tregistry.getSource(sourceId),\n\t\t\t'Expected sourceIds to be registered.',\n\t\t)\n\t})\n}\n\nfunction verifyGetSourceClientOffsetIsFunction(getSourceClientOffset: any) {\n\tinvariant(\n\t\ttypeof getSourceClientOffset === 'function',\n\t\t'When clientOffset is provided, getSourceClientOffset must be a function.',\n\t)\n}\n\nfunction verifyItemIsObject(item: any) {\n\tinvariant(isObject(item), 'Item must be an object.')\n}\n\nfunction getDraggableSource(sourceIds: Identifier[], monitor: DragDropMonitor) {\n\tlet sourceId = null\n\tfor (let i = sourceIds.length - 1; i >= 0; i--) {\n\t\tif (monitor.canDragSource(sourceIds[i])) {\n\t\t\tsourceId = sourceIds[i]\n\t\t\tbreak\n\t\t}\n\t}\n\treturn sourceId\n}\n"]},"metadata":{},"sourceType":"module"}