{"ast":null,"code":"import { invariant } from '@react-dnd/invariant';\nimport { getDifferenceFromInitialOffset, getSourceClientOffset } from '../utils/coords.js';\nimport { areDirty } from '../utils/dirtiness.js';\nimport { matchesType } from '../utils/matchesType.js';\nexport class DragDropMonitorImpl {\n  subscribeToStateChange(listener) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const {\n      handlerIds\n    } = options;\n    invariant(typeof listener === 'function', 'listener must be a function.');\n    invariant(typeof handlerIds === 'undefined' || Array.isArray(handlerIds), 'handlerIds, when specified, must be an array of strings.');\n    let prevStateId = this.store.getState().stateId;\n\n    const handleChange = () => {\n      const state = this.store.getState();\n      const currentStateId = state.stateId;\n\n      try {\n        const canSkipListener = currentStateId === prevStateId || currentStateId === prevStateId + 1 && !areDirty(state.dirtyHandlerIds, handlerIds);\n\n        if (!canSkipListener) {\n          listener();\n        }\n      } finally {\n        prevStateId = currentStateId;\n      }\n    };\n\n    return this.store.subscribe(handleChange);\n  }\n\n  subscribeToOffsetChange(listener) {\n    invariant(typeof listener === 'function', 'listener must be a function.');\n    let previousState = this.store.getState().dragOffset;\n\n    const handleChange = () => {\n      const nextState = this.store.getState().dragOffset;\n\n      if (nextState === previousState) {\n        return;\n      }\n\n      previousState = nextState;\n      listener();\n    };\n\n    return this.store.subscribe(handleChange);\n  }\n\n  canDragSource(sourceId) {\n    if (!sourceId) {\n      return false;\n    }\n\n    const source = this.registry.getSource(sourceId);\n    invariant(source, `Expected to find a valid source. sourceId=${sourceId}`);\n\n    if (this.isDragging()) {\n      return false;\n    }\n\n    return source.canDrag(this, sourceId);\n  }\n\n  canDropOnTarget(targetId) {\n    // undefined on initial render\n    if (!targetId) {\n      return false;\n    }\n\n    const target = this.registry.getTarget(targetId);\n    invariant(target, `Expected to find a valid target. targetId=${targetId}`);\n\n    if (!this.isDragging() || this.didDrop()) {\n      return false;\n    }\n\n    const targetType = this.registry.getTargetType(targetId);\n    const draggedItemType = this.getItemType();\n    return matchesType(targetType, draggedItemType) && target.canDrop(this, targetId);\n  }\n\n  isDragging() {\n    return Boolean(this.getItemType());\n  }\n\n  isDraggingSource(sourceId) {\n    // undefined on initial render\n    if (!sourceId) {\n      return false;\n    }\n\n    const source = this.registry.getSource(sourceId, true);\n    invariant(source, `Expected to find a valid source. sourceId=${sourceId}`);\n\n    if (!this.isDragging() || !this.isSourcePublic()) {\n      return false;\n    }\n\n    const sourceType = this.registry.getSourceType(sourceId);\n    const draggedItemType = this.getItemType();\n\n    if (sourceType !== draggedItemType) {\n      return false;\n    }\n\n    return source.isDragging(this, sourceId);\n  }\n\n  isOverTarget(targetId) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n      shallow: false\n    };\n\n    // undefined on initial render\n    if (!targetId) {\n      return false;\n    }\n\n    const {\n      shallow\n    } = options;\n\n    if (!this.isDragging()) {\n      return false;\n    }\n\n    const targetType = this.registry.getTargetType(targetId);\n    const draggedItemType = this.getItemType();\n\n    if (draggedItemType && !matchesType(targetType, draggedItemType)) {\n      return false;\n    }\n\n    const targetIds = this.getTargetIds();\n\n    if (!targetIds.length) {\n      return false;\n    }\n\n    const index = targetIds.indexOf(targetId);\n\n    if (shallow) {\n      return index === targetIds.length - 1;\n    } else {\n      return index > -1;\n    }\n  }\n\n  getItemType() {\n    return this.store.getState().dragOperation.itemType;\n  }\n\n  getItem() {\n    return this.store.getState().dragOperation.item;\n  }\n\n  getSourceId() {\n    return this.store.getState().dragOperation.sourceId;\n  }\n\n  getTargetIds() {\n    return this.store.getState().dragOperation.targetIds;\n  }\n\n  getDropResult() {\n    return this.store.getState().dragOperation.dropResult;\n  }\n\n  didDrop() {\n    return this.store.getState().dragOperation.didDrop;\n  }\n\n  isSourcePublic() {\n    return Boolean(this.store.getState().dragOperation.isSourcePublic);\n  }\n\n  getInitialClientOffset() {\n    return this.store.getState().dragOffset.initialClientOffset;\n  }\n\n  getInitialSourceClientOffset() {\n    return this.store.getState().dragOffset.initialSourceClientOffset;\n  }\n\n  getClientOffset() {\n    return this.store.getState().dragOffset.clientOffset;\n  }\n\n  getSourceClientOffset() {\n    return getSourceClientOffset(this.store.getState().dragOffset);\n  }\n\n  getDifferenceFromInitialOffset() {\n    return getDifferenceFromInitialOffset(this.store.getState().dragOffset);\n  }\n\n  constructor(store, registry) {\n    this.store = store;\n    this.registry = registry;\n  }\n\n}","map":{"version":3,"mappings":"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","names":["invariant","getDifferenceFromInitialOffset","getSourceClientOffset","areDirty","matchesType","DragDropMonitorImpl","subscribeToStateChange","listener","options","handlerIds","Array","isArray","prevStateId","store","getState","stateId","handleChange","state","currentStateId","canSkipListener","dirtyHandlerIds","subscribe","subscribeToOffsetChange","previousState","dragOffset","nextState","canDragSource","sourceId","source","registry","getSource","isDragging","canDrag","canDropOnTarget","targetId","target","getTarget","didDrop","targetType","getTargetType","draggedItemType","getItemType","canDrop","Boolean","isDraggingSource","isSourcePublic","sourceType","getSourceType","isOverTarget","shallow","targetIds","getTargetIds","length","index","indexOf","dragOperation","itemType","getItem","item","getSourceId","getDropResult","dropResult","getInitialClientOffset","initialClientOffset","getInitialSourceClientOffset","initialSourceClientOffset","getClientOffset","clientOffset","constructor"],"sources":["C:\\Users\\multicampus\\Desktop\\projects\\theground\\front-end\\node_modules\\dnd-core\\src\\classes\\DragDropMonitorImpl.ts"],"sourcesContent":["import { invariant } from '@react-dnd/invariant'\nimport type { Store } from 'redux'\n\nimport type {\n\tDragDropMonitor,\n\tHandlerRegistry,\n\tIdentifier,\n\tListener,\n\tUnsubscribe,\n\tXYCoord,\n} from '../interfaces.js'\nimport type { State } from '../reducers/index.js'\nimport {\n\tgetDifferenceFromInitialOffset,\n\tgetSourceClientOffset,\n} from '../utils/coords.js'\nimport { areDirty } from '../utils/dirtiness.js'\nimport { matchesType } from '../utils/matchesType.js'\n\nexport class DragDropMonitorImpl implements DragDropMonitor {\n\tprivate store: Store<State>\n\tpublic readonly registry: HandlerRegistry\n\n\tpublic constructor(store: Store<State>, registry: HandlerRegistry) {\n\t\tthis.store = store\n\t\tthis.registry = registry\n\t}\n\n\tpublic subscribeToStateChange(\n\t\tlistener: Listener,\n\t\toptions: { handlerIds?: string[] } = {},\n\t): Unsubscribe {\n\t\tconst { handlerIds } = options\n\t\tinvariant(typeof listener === 'function', 'listener must be a function.')\n\t\tinvariant(\n\t\t\ttypeof handlerIds === 'undefined' || Array.isArray(handlerIds),\n\t\t\t'handlerIds, when specified, must be an array of strings.',\n\t\t)\n\n\t\tlet prevStateId = this.store.getState().stateId\n\t\tconst handleChange = () => {\n\t\t\tconst state = this.store.getState()\n\t\t\tconst currentStateId = state.stateId\n\t\t\ttry {\n\t\t\t\tconst canSkipListener =\n\t\t\t\t\tcurrentStateId === prevStateId ||\n\t\t\t\t\t(currentStateId === prevStateId + 1 &&\n\t\t\t\t\t\t!areDirty(state.dirtyHandlerIds, handlerIds))\n\n\t\t\t\tif (!canSkipListener) {\n\t\t\t\t\tlistener()\n\t\t\t\t}\n\t\t\t} finally {\n\t\t\t\tprevStateId = currentStateId\n\t\t\t}\n\t\t}\n\n\t\treturn this.store.subscribe(handleChange)\n\t}\n\n\tpublic subscribeToOffsetChange(listener: Listener): Unsubscribe {\n\t\tinvariant(typeof listener === 'function', 'listener must be a function.')\n\n\t\tlet previousState = this.store.getState().dragOffset\n\t\tconst handleChange = () => {\n\t\t\tconst nextState = this.store.getState().dragOffset\n\t\t\tif (nextState === previousState) {\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\tpreviousState = nextState\n\t\t\tlistener()\n\t\t}\n\n\t\treturn this.store.subscribe(handleChange)\n\t}\n\n\tpublic canDragSource(sourceId: string | undefined): boolean {\n\t\tif (!sourceId) {\n\t\t\treturn false\n\t\t}\n\t\tconst source = this.registry.getSource(sourceId)\n\t\tinvariant(source, `Expected to find a valid source. sourceId=${sourceId}`)\n\n\t\tif (this.isDragging()) {\n\t\t\treturn false\n\t\t}\n\n\t\treturn source.canDrag(this, sourceId)\n\t}\n\n\tpublic canDropOnTarget(targetId: string | undefined): boolean {\n\t\t// undefined on initial render\n\t\tif (!targetId) {\n\t\t\treturn false\n\t\t}\n\t\tconst target = this.registry.getTarget(targetId)\n\t\tinvariant(target, `Expected to find a valid target. targetId=${targetId}`)\n\n\t\tif (!this.isDragging() || this.didDrop()) {\n\t\t\treturn false\n\t\t}\n\n\t\tconst targetType = this.registry.getTargetType(targetId)\n\t\tconst draggedItemType = this.getItemType()\n\t\treturn (\n\t\t\tmatchesType(targetType, draggedItemType) && target.canDrop(this, targetId)\n\t\t)\n\t}\n\n\tpublic isDragging(): boolean {\n\t\treturn Boolean(this.getItemType())\n\t}\n\n\tpublic isDraggingSource(sourceId: string | undefined): boolean {\n\t\t// undefined on initial render\n\t\tif (!sourceId) {\n\t\t\treturn false\n\t\t}\n\t\tconst source = this.registry.getSource(sourceId, true)\n\t\tinvariant(source, `Expected to find a valid source. sourceId=${sourceId}`)\n\n\t\tif (!this.isDragging() || !this.isSourcePublic()) {\n\t\t\treturn false\n\t\t}\n\n\t\tconst sourceType = this.registry.getSourceType(sourceId)\n\t\tconst draggedItemType = this.getItemType()\n\t\tif (sourceType !== draggedItemType) {\n\t\t\treturn false\n\t\t}\n\n\t\treturn source.isDragging(this, sourceId)\n\t}\n\n\tpublic isOverTarget(\n\t\ttargetId: string | undefined,\n\t\toptions = { shallow: false },\n\t): boolean {\n\t\t// undefined on initial render\n\t\tif (!targetId) {\n\t\t\treturn false\n\t\t}\n\n\t\tconst { shallow } = options\n\t\tif (!this.isDragging()) {\n\t\t\treturn false\n\t\t}\n\n\t\tconst targetType = this.registry.getTargetType(targetId)\n\t\tconst draggedItemType = this.getItemType()\n\t\tif (draggedItemType && !matchesType(targetType, draggedItemType)) {\n\t\t\treturn false\n\t\t}\n\n\t\tconst targetIds = this.getTargetIds()\n\t\tif (!targetIds.length) {\n\t\t\treturn false\n\t\t}\n\n\t\tconst index = targetIds.indexOf(targetId)\n\t\tif (shallow) {\n\t\t\treturn index === targetIds.length - 1\n\t\t} else {\n\t\t\treturn index > -1\n\t\t}\n\t}\n\n\tpublic getItemType(): Identifier {\n\t\treturn this.store.getState().dragOperation.itemType as Identifier\n\t}\n\n\tpublic getItem(): any {\n\t\treturn this.store.getState().dragOperation.item\n\t}\n\n\tpublic getSourceId(): string | null {\n\t\treturn this.store.getState().dragOperation.sourceId\n\t}\n\n\tpublic getTargetIds(): string[] {\n\t\treturn this.store.getState().dragOperation.targetIds\n\t}\n\n\tpublic getDropResult(): any {\n\t\treturn this.store.getState().dragOperation.dropResult\n\t}\n\n\tpublic didDrop(): boolean {\n\t\treturn this.store.getState().dragOperation.didDrop\n\t}\n\n\tpublic isSourcePublic(): boolean {\n\t\treturn Boolean(this.store.getState().dragOperation.isSourcePublic)\n\t}\n\n\tpublic getInitialClientOffset(): XYCoord | null {\n\t\treturn this.store.getState().dragOffset.initialClientOffset\n\t}\n\n\tpublic getInitialSourceClientOffset(): XYCoord | null {\n\t\treturn this.store.getState().dragOffset.initialSourceClientOffset\n\t}\n\n\tpublic getClientOffset(): XYCoord | null {\n\t\treturn this.store.getState().dragOffset.clientOffset\n\t}\n\n\tpublic getSourceClientOffset(): XYCoord | null {\n\t\treturn getSourceClientOffset(this.store.getState().dragOffset)\n\t}\n\n\tpublic getDifferenceFromInitialOffset(): XYCoord | null {\n\t\treturn getDifferenceFromInitialOffset(this.store.getState().dragOffset)\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}