{"ast":null,"code":"export class MonotonicInterpolant {\n  interpolate(x) {\n    const {\n      xs,\n      ys,\n      c1s,\n      c2s,\n      c3s\n    } = this; // The rightmost point in the dataset should give an exact result\n\n    let i = xs.length - 1;\n\n    if (x === xs[i]) {\n      return ys[i];\n    } // Search for the interval x is in, returning the corresponding y if x is one of the original xs\n\n\n    let low = 0;\n    let high = c3s.length - 1;\n    let mid;\n\n    while (low <= high) {\n      mid = Math.floor(0.5 * (low + high));\n      const xHere = xs[mid];\n\n      if (xHere < x) {\n        low = mid + 1;\n      } else if (xHere > x) {\n        high = mid - 1;\n      } else {\n        return ys[mid];\n      }\n    }\n\n    i = Math.max(0, high); // Interpolate\n\n    const diff = x - xs[i];\n    const diffSq = diff * diff;\n    return ys[i] + c1s[i] * diff + c2s[i] * diffSq + c3s[i] * diff * diffSq;\n  }\n\n  constructor(xs, ys) {\n    const {\n      length\n    } = xs; // Rearrange xs and ys so that xs is sorted\n\n    const indexes = [];\n\n    for (let i = 0; i < length; i++) {\n      indexes.push(i);\n    }\n\n    indexes.sort((a, b) => xs[a] < xs[b] ? -1 : 1); // Get consecutive differences and slopes\n\n    const dys = [];\n    const dxs = [];\n    const ms = [];\n    let dx;\n    let dy;\n\n    for (let i1 = 0; i1 < length - 1; i1++) {\n      dx = xs[i1 + 1] - xs[i1];\n      dy = ys[i1 + 1] - ys[i1];\n      dxs.push(dx);\n      dys.push(dy);\n      ms.push(dy / dx);\n    } // Get degree-1 coefficients\n\n\n    const c1s = [ms[0]];\n\n    for (let i2 = 0; i2 < dxs.length - 1; i2++) {\n      const m2 = ms[i2];\n      const mNext = ms[i2 + 1];\n\n      if (m2 * mNext <= 0) {\n        c1s.push(0);\n      } else {\n        dx = dxs[i2];\n        const dxNext = dxs[i2 + 1];\n        const common = dx + dxNext;\n        c1s.push(3 * common / ((common + dxNext) / m2 + (common + dx) / mNext));\n      }\n    }\n\n    c1s.push(ms[ms.length - 1]); // Get degree-2 and degree-3 coefficients\n\n    const c2s = [];\n    const c3s = [];\n    let m;\n\n    for (let i3 = 0; i3 < c1s.length - 1; i3++) {\n      m = ms[i3];\n      const c1 = c1s[i3];\n      const invDx = 1 / dxs[i3];\n      const common = c1 + c1s[i3 + 1] - m - m;\n      c2s.push((m - c1 - common) * invDx);\n      c3s.push(common * invDx * invDx);\n    }\n\n    this.xs = xs;\n    this.ys = ys;\n    this.c1s = c1s;\n    this.c2s = c2s;\n    this.c3s = c3s;\n  }\n\n}","map":{"version":3,"mappings":"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","names":["MonotonicInterpolant","interpolate","x","xs","ys","c1s","c2s","c3s","i","length","low","high","mid","Math","floor","xHere","max","diff","diffSq","constructor","indexes","push","sort","a","b","dys","dxs","ms","dx","dy","m2","mNext","dxNext","common","m","c1","invDx"],"sources":["C:\\Users\\multicampus\\Desktop\\projects\\theground\\front-end\\node_modules\\react-dnd-html5-backend\\src\\MonotonicInterpolant.ts"],"sourcesContent":["export class MonotonicInterpolant {\n\tprivate xs: any\n\tprivate ys: any\n\tprivate c1s: any\n\tprivate c2s: any\n\tprivate c3s: any\n\n\tpublic constructor(xs: number[], ys: number[]) {\n\t\tconst { length } = xs\n\n\t\t// Rearrange xs and ys so that xs is sorted\n\t\tconst indexes = []\n\t\tfor (let i = 0; i < length; i++) {\n\t\t\tindexes.push(i)\n\t\t}\n\t\tindexes.sort((a, b) => ((xs[a] as number) < (xs[b] as number) ? -1 : 1))\n\n\t\t// Get consecutive differences and slopes\n\t\tconst dys = []\n\t\tconst dxs = []\n\t\tconst ms = []\n\t\tlet dx\n\t\tlet dy\n\t\tfor (let i = 0; i < length - 1; i++) {\n\t\t\tdx = (xs[i + 1] as number) - (xs[i] as number)\n\t\t\tdy = (ys[i + 1] as number) - (ys[i] as number)\n\t\t\tdxs.push(dx)\n\t\t\tdys.push(dy)\n\t\t\tms.push(dy / dx)\n\t\t}\n\n\t\t// Get degree-1 coefficients\n\t\tconst c1s = [ms[0]]\n\t\tfor (let i = 0; i < dxs.length - 1; i++) {\n\t\t\tconst m2 = ms[i] as number\n\t\t\tconst mNext = ms[i + 1] as number\n\t\t\tif (m2 * mNext <= 0) {\n\t\t\t\tc1s.push(0)\n\t\t\t} else {\n\t\t\t\tdx = dxs[i] as number\n\t\t\t\tconst dxNext = dxs[i + 1] as number\n\t\t\t\tconst common = dx + dxNext\n\t\t\t\tc1s.push(\n\t\t\t\t\t(3 * common) / ((common + dxNext) / m2 + (common + dx) / mNext),\n\t\t\t\t)\n\t\t\t}\n\t\t}\n\t\tc1s.push(ms[ms.length - 1])\n\n\t\t// Get degree-2 and degree-3 coefficients\n\t\tconst c2s = []\n\t\tconst c3s = []\n\t\tlet m\n\t\tfor (let i = 0; i < c1s.length - 1; i++) {\n\t\t\tm = ms[i] as number\n\t\t\tconst c1 = c1s[i] as number\n\t\t\tconst invDx = 1 / (dxs[i] as number)\n\t\t\tconst common = c1 + (c1s[i + 1] as number) - m - m\n\t\t\tc2s.push((m - c1 - common) * invDx)\n\t\t\tc3s.push(common * invDx * invDx)\n\t\t}\n\n\t\tthis.xs = xs\n\t\tthis.ys = ys\n\t\tthis.c1s = c1s\n\t\tthis.c2s = c2s\n\t\tthis.c3s = c3s\n\t}\n\n\tpublic interpolate(x: number): number {\n\t\tconst { xs, ys, c1s, c2s, c3s } = this\n\n\t\t// The rightmost point in the dataset should give an exact result\n\t\tlet i = xs.length - 1\n\t\tif (x === xs[i]) {\n\t\t\treturn ys[i]\n\t\t}\n\n\t\t// Search for the interval x is in, returning the corresponding y if x is one of the original xs\n\t\tlet low = 0\n\t\tlet high = c3s.length - 1\n\t\tlet mid\n\t\twhile (low <= high) {\n\t\t\tmid = Math.floor(0.5 * (low + high))\n\t\t\tconst xHere = xs[mid]\n\t\t\tif (xHere < x) {\n\t\t\t\tlow = mid + 1\n\t\t\t} else if (xHere > x) {\n\t\t\t\thigh = mid - 1\n\t\t\t} else {\n\t\t\t\treturn ys[mid]\n\t\t\t}\n\t\t}\n\t\ti = Math.max(0, high)\n\n\t\t// Interpolate\n\t\tconst diff = x - xs[i]\n\t\tconst diffSq = diff * diff\n\t\treturn ys[i] + c1s[i] * diff + c2s[i] * diffSq + c3s[i] * diff * diffSq\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}