{"ast":null,"code":"import equal from 'fast-deep-equal';\nimport { useCallback, useState } from 'react';\nimport { useIsomorphicLayoutEffect } from './useIsomorphicLayoutEffect.js';\n/**\n *\n * @param monitor The monitor to collect state from\n * @param collect The collecting function\n * @param onUpdate A method to invoke when updates occur\n */\n\nexport function useCollector(monitor, collect, onUpdate) {\n  const [collected, setCollected] = useState(() => collect(monitor));\n  const updateCollected = useCallback(() => {\n    const nextValue = collect(monitor); // This needs to be a deep-equality check because some monitor-collected values\n    // include XYCoord objects that may be equivalent, but do not have instance equality.\n\n    if (!equal(collected, nextValue)) {\n      setCollected(nextValue);\n\n      if (onUpdate) {\n        onUpdate();\n      }\n    }\n  }, [collected, monitor, onUpdate]); // update the collected properties after react renders.\n  // Note that the \"Dustbin Stress Test\" fails if this is not\n  // done when the component updates\n\n  useIsomorphicLayoutEffect(updateCollected);\n  return [collected, updateCollected];\n}","map":{"version":3,"mappings":"AAAA,OAAOA,KAAP,MAAkB,iBAAlB;AACA,SAASC,WAAT,EAAsBC,QAAtB,QAAsC,OAAtC;AAEA,SAASC,yBAAT,QAA0C,gCAA1C;AAEA;;;;;;;AAMA,OAAO,SAASC,YAAT,CACNC,OADM,EAENC,OAFM,EAGNC,QAHM,EAIY;EAClB,MAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BP,QAAQ,CAAC,MAAMI,OAAO,CAACD,OAAD,CAAd,CAA1C;EAEA,MAAMK,eAAe,GAAGT,WAAW,CAAC,MAAM;IACzC,MAAMU,SAAS,GAAGL,OAAO,CAACD,OAAD,CAAzB,CADyC,CAEzC;IACA;;IACA,IAAI,CAACL,KAAK,CAACQ,SAAD,EAAYG,SAAZ,CAAV,EAAkC;MACjCF,YAAY,CAACE,SAAD,CAAZF;;MACA,IAAIF,QAAJ,EAAc;QACbA,QAAQ;MACR;IACD;EACD,CAVkC,EAUhC,CAACC,SAAD,EAAYH,OAAZ,EAAqBE,QAArB,CAVgC,CAAnC,CAHkB,CAelB;EACA;EACA;;EACAJ,yBAAyB,CAACO,eAAD,CAAzBP;EAEA,OAAO,CAACK,SAAD,EAAYE,eAAZ,CAAP;AACA","names":["equal","useCallback","useState","useIsomorphicLayoutEffect","useCollector","monitor","collect","onUpdate","collected","setCollected","updateCollected","nextValue"],"sources":["C:\\Users\\multicampus\\Desktop\\projects\\theground\\front-end\\node_modules\\react-dnd\\src\\hooks\\useCollector.ts"],"sourcesContent":["import equal from 'fast-deep-equal'\nimport { useCallback, useState } from 'react'\n\nimport { useIsomorphicLayoutEffect } from './useIsomorphicLayoutEffect.js'\n\n/**\n *\n * @param monitor The monitor to collect state from\n * @param collect The collecting function\n * @param onUpdate A method to invoke when updates occur\n */\nexport function useCollector<T, S>(\n\tmonitor: T,\n\tcollect: (monitor: T) => S,\n\tonUpdate?: () => void,\n): [S, () => void] {\n\tconst [collected, setCollected] = useState(() => collect(monitor))\n\n\tconst updateCollected = useCallback(() => {\n\t\tconst nextValue = collect(monitor)\n\t\t// This needs to be a deep-equality check because some monitor-collected values\n\t\t// include XYCoord objects that may be equivalent, but do not have instance equality.\n\t\tif (!equal(collected, nextValue)) {\n\t\t\tsetCollected(nextValue)\n\t\t\tif (onUpdate) {\n\t\t\t\tonUpdate()\n\t\t\t}\n\t\t}\n\t}, [collected, monitor, onUpdate])\n\n\t// update the collected properties after react renders.\n\t// Note that the \"Dustbin Stress Test\" fails if this is not\n\t// done when the component updates\n\tuseIsomorphicLayoutEffect(updateCollected)\n\n\treturn [collected, updateCollected]\n}\n"]},"metadata":{},"sourceType":"module"}