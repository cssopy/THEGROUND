{"ast":null,"code":"import { invariant } from '@react-dnd/invariant';\nimport { matchesType } from '../../utils/matchesType.js';\nimport { HOVER } from './types.js';\nexport function createHover(manager) {\n  return function hover(targetIdsArg) {\n    let {\n      clientOffset\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    verifyTargetIdsIsArray(targetIdsArg);\n    const targetIds = targetIdsArg.slice(0);\n    const monitor = manager.getMonitor();\n    const registry = manager.getRegistry();\n    const draggedItemType = monitor.getItemType();\n    removeNonMatchingTargetIds(targetIds, registry, draggedItemType);\n    checkInvariants(targetIds, monitor, registry);\n    hoverAllTargets(targetIds, monitor, registry);\n    return {\n      type: HOVER,\n      payload: {\n        targetIds,\n        clientOffset: clientOffset || null\n      }\n    };\n  };\n}\n\nfunction verifyTargetIdsIsArray(targetIdsArg) {\n  invariant(Array.isArray(targetIdsArg), 'Expected targetIds to be an array.');\n}\n\nfunction checkInvariants(targetIds, monitor, registry) {\n  invariant(monitor.isDragging(), 'Cannot call hover while not dragging.');\n  invariant(!monitor.didDrop(), 'Cannot call hover after drop.');\n\n  for (let i = 0; i < targetIds.length; i++) {\n    const targetId = targetIds[i];\n    invariant(targetIds.lastIndexOf(targetId) === i, 'Expected targetIds to be unique in the passed array.');\n    const target = registry.getTarget(targetId);\n    invariant(target, 'Expected targetIds to be registered.');\n  }\n}\n\nfunction removeNonMatchingTargetIds(targetIds, registry, draggedItemType) {\n  // Remove those targetIds that don't match the targetType.  This\n  // fixes shallow isOver which would only be non-shallow because of\n  // non-matching targets.\n  for (let i = targetIds.length - 1; i >= 0; i--) {\n    const targetId = targetIds[i];\n    const targetType = registry.getTargetType(targetId);\n\n    if (!matchesType(targetType, draggedItemType)) {\n      targetIds.splice(i, 1);\n    }\n  }\n}\n\nfunction hoverAllTargets(targetIds, monitor, registry) {\n  // Finally call hover on all matching targets.\n  targetIds.forEach(function (targetId) {\n    const target = registry.getTarget(targetId);\n    target.hover(monitor, targetId);\n  });\n}","map":{"version":3,"mappings":"AAAA,SAASA,SAAT,QAA0B,sBAA1B;AAWA,SAASC,WAAT,QAA4B,4BAA5B;AACA,SAASC,KAAT,QAAsB,YAAtB;AAEA,OAAO,SAASC,WAAT,CAAqBC,OAArB,EAA+C;EACrD,OAAO,SAASC,KAAT,CACNC,YADM,EAGiB;IAAA,IADvB;MAAEC;IAAF,CACuB,uEADU,EACV;IACvBC,sBAAsB,CAACF,YAAD,CAAtBE;IACA,MAAMC,SAAS,GAAGH,YAAY,CAACI,KAAbJ,CAAmB,CAAnBA,CAAlB;IACA,MAAMK,OAAO,GAAGP,OAAO,CAACQ,UAARR,EAAhB;IACA,MAAMS,QAAQ,GAAGT,OAAO,CAACU,WAARV,EAAjB;IACA,MAAMW,eAAe,GAAGJ,OAAO,CAACK,WAARL,EAAxB;IACAM,0BAA0B,CAACR,SAAD,EAAYI,QAAZ,EAAsBE,eAAtB,CAA1BE;IACAC,eAAe,CAACT,SAAD,EAAYE,OAAZ,EAAqBE,QAArB,CAAfK;IACAC,eAAe,CAACV,SAAD,EAAYE,OAAZ,EAAqBE,QAArB,CAAfM;IAEA,OAAO;MACNC,IAAI,EAAElB,KADA;MAENmB,OAAO,EAAE;QACRZ,SADQ;QAERF,YAAY,EAAEA,YAAY,IAAI;MAFtB;IAFH,CAAP;EAOA,CApBD;AAqBA;;AAED,SAASC,sBAAT,CAAgCF,YAAhC,EAAwD;EACvDN,SAAS,CAACsB,KAAK,CAACC,OAAND,CAAchB,YAAdgB,CAAD,EAA8B,oCAA9B,CAATtB;AACA;;AAED,SAASkB,eAAT,CACCT,SADD,EAECE,OAFD,EAGCE,QAHD,EAIE;EACDb,SAAS,CAACW,OAAO,CAACa,UAARb,EAAD,EAAuB,uCAAvB,CAATX;EACAA,SAAS,CAAC,CAACW,OAAO,CAACc,OAARd,EAAF,EAAqB,+BAArB,CAATX;;EACA,KAAK,IAAI0B,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGjB,SAAS,CAACkB,MAA9B,EAAsCD,CAAC,EAAvC,EAA2C;IAC1C,MAAME,QAAQ,GAAGnB,SAAS,CAACiB,CAAD,CAA1B;IACA1B,SAAS,CACRS,SAAS,CAACoB,WAAVpB,CAAsBmB,QAAtBnB,MAAoCiB,CAD5B,EAER,sDAFQ,CAAT1B;IAKA,MAAM8B,MAAM,GAAGjB,QAAQ,CAACkB,SAATlB,CAAmBe,QAAnBf,CAAf;IACAb,SAAS,CAAC8B,MAAD,EAAS,sCAAT,CAAT9B;EACA;AACD;;AAED,SAASiB,0BAAT,CACCR,SADD,EAECI,QAFD,EAGCE,eAHD,EAIE;EACD;EACA;EACA;EACA,KAAK,IAAIW,CAAC,GAAGjB,SAAS,CAACkB,MAAVlB,GAAmB,CAAhC,EAAmCiB,CAAC,IAAI,CAAxC,EAA2CA,CAAC,EAA5C,EAAgD;IAC/C,MAAME,QAAQ,GAAGnB,SAAS,CAACiB,CAAD,CAA1B;IACA,MAAMM,UAAU,GAAGnB,QAAQ,CAACoB,aAATpB,CAAuBe,QAAvBf,CAAnB;;IACA,IAAI,CAACZ,WAAW,CAAC+B,UAAD,EAAajB,eAAb,CAAhB,EAA+C;MAC9CN,SAAS,CAACyB,MAAVzB,CAAiBiB,CAAjBjB,EAAoB,CAApBA;IACA;EACD;AACD;;AAED,SAASU,eAAT,CACCV,SADD,EAECE,OAFD,EAGCE,QAHD,EAIE;EACD;EACAJ,SAAS,CAAC0B,OAAV1B,CAAkB,UAAUmB,QAAV,EAAoB;IACrC,MAAME,MAAM,GAAGjB,QAAQ,CAACkB,SAATlB,CAAmBe,QAAnBf,CAAf;IACAiB,MAAM,CAACzB,KAAPyB,CAAanB,OAAbmB,EAAsBF,QAAtBE;EACA,CAHDrB;AAIA","names":["invariant","matchesType","HOVER","createHover","manager","hover","targetIdsArg","clientOffset","verifyTargetIdsIsArray","targetIds","slice","monitor","getMonitor","registry","getRegistry","draggedItemType","getItemType","removeNonMatchingTargetIds","checkInvariants","hoverAllTargets","type","payload","Array","isArray","isDragging","didDrop","i","length","targetId","lastIndexOf","target","getTarget","targetType","getTargetType","splice","forEach"],"sources":["C:\\Users\\multicampus\\Desktop\\projects\\theground\\front-end\\node_modules\\dnd-core\\src\\actions\\dragDrop\\hover.ts"],"sourcesContent":["import { invariant } from '@react-dnd/invariant'\n\nimport type {\n\tAction,\n\tDragDropManager,\n\tDragDropMonitor,\n\tHandlerRegistry,\n\tHoverOptions,\n\tHoverPayload,\n\tIdentifier,\n} from '../../interfaces.js'\nimport { matchesType } from '../../utils/matchesType.js'\nimport { HOVER } from './types.js'\n\nexport function createHover(manager: DragDropManager) {\n\treturn function hover(\n\t\ttargetIdsArg: string[],\n\t\t{ clientOffset }: HoverOptions = {},\n\t): Action<HoverPayload> {\n\t\tverifyTargetIdsIsArray(targetIdsArg)\n\t\tconst targetIds = targetIdsArg.slice(0)\n\t\tconst monitor = manager.getMonitor()\n\t\tconst registry = manager.getRegistry()\n\t\tconst draggedItemType = monitor.getItemType()\n\t\tremoveNonMatchingTargetIds(targetIds, registry, draggedItemType)\n\t\tcheckInvariants(targetIds, monitor, registry)\n\t\thoverAllTargets(targetIds, monitor, registry)\n\n\t\treturn {\n\t\t\ttype: HOVER,\n\t\t\tpayload: {\n\t\t\t\ttargetIds,\n\t\t\t\tclientOffset: clientOffset || null,\n\t\t\t},\n\t\t}\n\t}\n}\n\nfunction verifyTargetIdsIsArray(targetIdsArg: string[]) {\n\tinvariant(Array.isArray(targetIdsArg), 'Expected targetIds to be an array.')\n}\n\nfunction checkInvariants(\n\ttargetIds: string[],\n\tmonitor: DragDropMonitor,\n\tregistry: HandlerRegistry,\n) {\n\tinvariant(monitor.isDragging(), 'Cannot call hover while not dragging.')\n\tinvariant(!monitor.didDrop(), 'Cannot call hover after drop.')\n\tfor (let i = 0; i < targetIds.length; i++) {\n\t\tconst targetId = targetIds[i] as string\n\t\tinvariant(\n\t\t\ttargetIds.lastIndexOf(targetId) === i,\n\t\t\t'Expected targetIds to be unique in the passed array.',\n\t\t)\n\n\t\tconst target = registry.getTarget(targetId)\n\t\tinvariant(target, 'Expected targetIds to be registered.')\n\t}\n}\n\nfunction removeNonMatchingTargetIds(\n\ttargetIds: string[],\n\tregistry: HandlerRegistry,\n\tdraggedItemType: Identifier | null,\n) {\n\t// Remove those targetIds that don't match the targetType.  This\n\t// fixes shallow isOver which would only be non-shallow because of\n\t// non-matching targets.\n\tfor (let i = targetIds.length - 1; i >= 0; i--) {\n\t\tconst targetId = targetIds[i] as string\n\t\tconst targetType = registry.getTargetType(targetId)\n\t\tif (!matchesType(targetType, draggedItemType)) {\n\t\t\ttargetIds.splice(i, 1)\n\t\t}\n\t}\n}\n\nfunction hoverAllTargets(\n\ttargetIds: string[],\n\tmonitor: DragDropMonitor,\n\tregistry: HandlerRegistry,\n) {\n\t// Finally call hover on all matching targets.\n\ttargetIds.forEach(function (targetId) {\n\t\tconst target = registry.getTarget(targetId)\n\t\ttarget.hover(monitor, targetId)\n\t})\n}\n"]},"metadata":{},"sourceType":"module"}