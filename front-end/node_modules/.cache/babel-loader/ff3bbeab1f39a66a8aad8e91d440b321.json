{"ast":null,"code":"function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    var ownKeys = Object.keys(source);\n\n    if (typeof Object.getOwnPropertySymbols === 'function') {\n      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n      }));\n    }\n\n    ownKeys.forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    });\n  }\n\n  return target;\n}\n\nimport { invariant } from '@react-dnd/invariant';\nimport { isObject } from '../../utils/js_utils.js';\nimport { DROP } from './types.js';\nexport function createDrop(manager) {\n  return function drop() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const monitor = manager.getMonitor();\n    const registry = manager.getRegistry();\n    verifyInvariants(monitor);\n    const targetIds = getDroppableTargets(monitor); // Multiple actions are dispatched here, which is why this doesn't return an action\n\n    targetIds.forEach((targetId, index) => {\n      const dropResult = determineDropResult(targetId, index, registry, monitor);\n      const action = {\n        type: DROP,\n        payload: {\n          dropResult: _objectSpread({}, options, dropResult)\n        }\n      };\n      manager.dispatch(action);\n    });\n  };\n}\n\nfunction verifyInvariants(monitor) {\n  invariant(monitor.isDragging(), 'Cannot call drop while not dragging.');\n  invariant(!monitor.didDrop(), 'Cannot call drop twice during one drag operation.');\n}\n\nfunction determineDropResult(targetId, index, registry, monitor) {\n  const target = registry.getTarget(targetId);\n  let dropResult = target ? target.drop(monitor, targetId) : undefined;\n  verifyDropResultType(dropResult);\n\n  if (typeof dropResult === 'undefined') {\n    dropResult = index === 0 ? {} : monitor.getDropResult();\n  }\n\n  return dropResult;\n}\n\nfunction verifyDropResultType(dropResult) {\n  invariant(typeof dropResult === 'undefined' || isObject(dropResult), 'Drop result must either be an object or undefined.');\n}\n\nfunction getDroppableTargets(monitor) {\n  const targetIds = monitor.getTargetIds().filter(monitor.canDropOnTarget, monitor);\n  targetIds.reverse();\n  return targetIds;\n}","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAASA,SAAT,QAA0B,sBAA1B;AAUA,SAASC,QAAT,QAAyB,yBAAzB;AACA,SAASC,IAAT,QAAqB,YAArB;AAEA,OAAO,SAASC,UAAT,CAAoBC,OAApB,EAA8C;EACpD,OAAO,SAASC,IAAT,GAAkC;IAAA,IAApBC,OAAoB,uEAAV,EAAU;IACxC,MAAMC,OAAO,GAAGH,OAAO,CAACI,UAARJ,EAAhB;IACA,MAAMK,QAAQ,GAAGL,OAAO,CAACM,WAARN,EAAjB;IACAO,gBAAgB,CAACJ,OAAD,CAAhBI;IACA,MAAMC,SAAS,GAAGC,mBAAmB,CAACN,OAAD,CAArC,CAJwC,CAMxC;;IACAK,SAAS,CAACE,OAAVF,CAAkB,CAACG,QAAD,EAAWC,KAAX,KAAqB;MACtC,MAAMC,UAAU,GAAGC,mBAAmB,CAACH,QAAD,EAAWC,KAAX,EAAkBP,QAAlB,EAA4BF,OAA5B,CAAtC;MACA,MAAMY,MAAM,GAAwB;QACnCC,IAAI,EAAElB,IAD6B;QAEnCmB,OAAO,EAAE;UACRJ,UAAU,EAAEK,kBACRhB,OADQ,EAERW,UAFQ;QADJ;MAF0B,CAApC;MASAb,OAAO,CAACmB,QAARnB,CAAiBe,MAAjBf;IACA,CAZDQ;EAaA,CApBD;AAqBA;;AAED,SAASD,gBAAT,CAA0BJ,OAA1B,EAAoD;EACnDP,SAAS,CAACO,OAAO,CAACiB,UAARjB,EAAD,EAAuB,sCAAvB,CAATP;EACAA,SAAS,CACR,CAACO,OAAO,CAACkB,OAARlB,EADO,EAER,mDAFQ,CAATP;AAIA;;AAED,SAASkB,mBAAT,CACCH,QADD,EAECC,KAFD,EAGCP,QAHD,EAICF,OAJD,EAKE;EACD,MAAMmB,MAAM,GAAGjB,QAAQ,CAACkB,SAATlB,CAAmBM,QAAnBN,CAAf;EACA,IAAIQ,UAAU,GAAGS,MAAM,GAAGA,MAAM,CAACrB,IAAPqB,CAAYnB,OAAZmB,EAAqBX,QAArBW,CAAH,GAAoCE,SAA3D;EACAC,oBAAoB,CAACZ,UAAD,CAApBY;;EACA,IAAI,OAAOZ,UAAP,KAAsB,WAA1B,EAAuC;IACtCA,UAAU,GAAGD,KAAK,KAAK,CAAVA,GAAc,EAAdA,GAAmBT,OAAO,CAACuB,aAARvB,EAAhCU;EACA;;EACD,OAAOA,UAAP;AACA;;AAED,SAASY,oBAAT,CAA8BZ,UAA9B,EAA+C;EAC9CjB,SAAS,CACR,OAAOiB,UAAP,KAAsB,WAAtB,IAAqChB,QAAQ,CAACgB,UAAD,CADrC,EAER,oDAFQ,CAATjB;AAIA;;AAED,SAASa,mBAAT,CAA6BN,OAA7B,EAAuD;EACtD,MAAMK,SAAS,GAAGL,OAAO,CACvBwB,YADgBxB,GAEhByB,MAFgBzB,CAETA,OAAO,CAAC0B,eAFC1B,EAEgBA,OAFhBA,CAAlB;EAGAK,SAAS,CAACsB,OAAVtB;EACA,OAAOA,SAAP;AACA","names":["invariant","isObject","DROP","createDrop","manager","drop","options","monitor","getMonitor","registry","getRegistry","verifyInvariants","targetIds","getDroppableTargets","forEach","targetId","index","dropResult","determineDropResult","action","type","payload","_objectSpread","dispatch","isDragging","didDrop","target","getTarget","undefined","verifyDropResultType","getDropResult","getTargetIds","filter","canDropOnTarget","reverse"],"sources":["C:\\Users\\multicampus\\Desktop\\projects\\theground\\front-end\\node_modules\\dnd-core\\src\\actions\\dragDrop\\drop.ts"],"sourcesContent":["import { invariant } from '@react-dnd/invariant'\n\nimport type {\n\tAction,\n\tDragDropManager,\n\tDragDropMonitor,\n\tDropPayload,\n\tHandlerRegistry,\n\tIdentifier,\n} from '../../interfaces.js'\nimport { isObject } from '../../utils/js_utils.js'\nimport { DROP } from './types.js'\n\nexport function createDrop(manager: DragDropManager) {\n\treturn function drop(options = {}): void {\n\t\tconst monitor = manager.getMonitor()\n\t\tconst registry = manager.getRegistry()\n\t\tverifyInvariants(monitor)\n\t\tconst targetIds = getDroppableTargets(monitor)\n\n\t\t// Multiple actions are dispatched here, which is why this doesn't return an action\n\t\ttargetIds.forEach((targetId, index) => {\n\t\t\tconst dropResult = determineDropResult(targetId, index, registry, monitor)\n\t\t\tconst action: Action<DropPayload> = {\n\t\t\t\ttype: DROP,\n\t\t\t\tpayload: {\n\t\t\t\t\tdropResult: {\n\t\t\t\t\t\t...options,\n\t\t\t\t\t\t...dropResult,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t}\n\t\t\tmanager.dispatch(action)\n\t\t})\n\t}\n}\n\nfunction verifyInvariants(monitor: DragDropMonitor) {\n\tinvariant(monitor.isDragging(), 'Cannot call drop while not dragging.')\n\tinvariant(\n\t\t!monitor.didDrop(),\n\t\t'Cannot call drop twice during one drag operation.',\n\t)\n}\n\nfunction determineDropResult(\n\ttargetId: Identifier,\n\tindex: number,\n\tregistry: HandlerRegistry,\n\tmonitor: DragDropMonitor,\n) {\n\tconst target = registry.getTarget(targetId)\n\tlet dropResult = target ? target.drop(monitor, targetId) : undefined\n\tverifyDropResultType(dropResult)\n\tif (typeof dropResult === 'undefined') {\n\t\tdropResult = index === 0 ? {} : monitor.getDropResult()\n\t}\n\treturn dropResult\n}\n\nfunction verifyDropResultType(dropResult: any) {\n\tinvariant(\n\t\ttypeof dropResult === 'undefined' || isObject(dropResult),\n\t\t'Drop result must either be an object or undefined.',\n\t)\n}\n\nfunction getDroppableTargets(monitor: DragDropMonitor) {\n\tconst targetIds = monitor\n\t\t.getTargetIds()\n\t\t.filter(monitor.canDropOnTarget, monitor)\n\ttargetIds.reverse()\n\treturn targetIds\n}\n"]},"metadata":{},"sourceType":"module"}