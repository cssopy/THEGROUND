{"ast":null,"code":"/**\n * Use invariant() to assert state which your program assumes to be true.\n *\n * Provide sprintf-style format (only %s is supported) and arguments\n * to provide information about what broke and what you were\n * expecting.\n *\n * The invariant message will be stripped in production, but the invariant\n * will remain to ensure logic does not differ in production.\n */\nexport function invariant(condition, format) {\n  for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n    args[_key - 2] = arguments[_key];\n  }\n\n  if (isProduction()) {\n    if (format === undefined) {\n      throw new Error('invariant requires an error message argument');\n    }\n  }\n\n  if (!condition) {\n    let error;\n\n    if (format === undefined) {\n      error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');\n    } else {\n      let argIndex = 0;\n      error = new Error(format.replace(/%s/g, function () {\n        return args[argIndex++];\n      }));\n      error.name = 'Invariant Violation';\n    }\n\n    error.framesToPop = 1 // we don't care about invariant's own frame\n    ;\n    throw error;\n  }\n}\n\nfunction isProduction() {\n  return typeof process !== 'undefined' && process.env['NODE_ENV'] === 'production';\n}","map":{"version":3,"mappings":"AAAA;;;;;;;;;;AAWA,OAAO,SAASA,SAAT,CAAmBC,SAAnB,EAAmCC,MAAnC,EAAmE;EAAA,kCAAbC,IAAa;IAAbA,IAAa;EAAA;;EACzE,IAAIC,YAAY,EAAhB,EAAoB;IACnB,IAAIF,MAAM,KAAKG,SAAf,EAA0B;MACzB,MAAM,IAAIC,KAAJ,CAAU,8CAAV,CAAN;IACA;EACD;;EAED,IAAI,CAACL,SAAL,EAAgB;IACf,IAAIM,KAAJ;;IACA,IAAIL,MAAM,KAAKG,SAAf,EAA0B;MACzBE,KAAK,GAAG,IAAID,KAAJ,CACP,uEACC,6DAFM,CAARC;IAIA,CALD,MAKO;MACN,IAAIC,QAAQ,GAAG,CAAf;MACAD,KAAK,GAAG,IAAID,KAAJ,CACPJ,MAAM,CAACO,OAAPP,CAAc,KAAdA,EAAsB,YAAY;QACjC,OAAOC,IAAI,CAACK,QAAQ,EAAT,CAAX;MACA,CAFDN,CADO,CAARK;MAKAA,KAAK,CAACG,IAANH,GAAa,qBAAbA;IACA;;IAEAA,KAAM,CAASI,WAAf,GAA6B,CAA7B,CAA+B;IAA/B;IACD,MAAMJ,KAAN;EACA;AACD;;AAED,SAASH,YAAT,GAAwB;EACvB,OACC,OAAOQ,OAAP,KAAmB,WAAnB,IAAkCA,OAAO,CAACC,GAARD,CAAY,UAAZA,MAA4B,YAD/D;AAGA","names":["invariant","condition","format","args","isProduction","undefined","Error","error","argIndex","replace","name","framesToPop","process","env"],"sources":["C:\\Users\\multicampus\\Desktop\\projects\\theground\\front-end\\node_modules\\@react-dnd\\invariant\\src\\index.ts"],"sourcesContent":["/**\n * Use invariant() to assert state which your program assumes to be true.\n *\n * Provide sprintf-style format (only %s is supported) and arguments\n * to provide information about what broke and what you were\n * expecting.\n *\n * The invariant message will be stripped in production, but the invariant\n * will remain to ensure logic does not differ in production.\n */\n\nexport function invariant(condition: any, format: string, ...args: any[]) {\n\tif (isProduction()) {\n\t\tif (format === undefined) {\n\t\t\tthrow new Error('invariant requires an error message argument')\n\t\t}\n\t}\n\n\tif (!condition) {\n\t\tlet error\n\t\tif (format === undefined) {\n\t\t\terror = new Error(\n\t\t\t\t'Minified exception occurred; use the non-minified dev environment ' +\n\t\t\t\t\t'for the full error message and additional helpful warnings.',\n\t\t\t)\n\t\t} else {\n\t\t\tlet argIndex = 0\n\t\t\terror = new Error(\n\t\t\t\tformat.replace(/%s/g, function () {\n\t\t\t\t\treturn args[argIndex++]\n\t\t\t\t}),\n\t\t\t)\n\t\t\terror.name = 'Invariant Violation'\n\t\t}\n\n\t\t;(error as any).framesToPop = 1 // we don't care about invariant's own frame\n\t\tthrow error\n\t}\n}\n\nfunction isProduction() {\n\treturn (\n\t\ttypeof process !== 'undefined' && process.env['NODE_ENV'] === 'production'\n\t)\n}\n"]},"metadata":{},"sourceType":"module"}